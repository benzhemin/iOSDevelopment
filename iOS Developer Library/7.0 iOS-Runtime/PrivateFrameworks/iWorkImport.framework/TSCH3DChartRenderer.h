/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class TSCH3DChartSceneAreaLayoutItem, TSCH3DSelectionPath;

@interface TSCH3DChartRenderer : TSCHRenderer {
    struct ChartProjectedBoundsSpaces { 
        struct box<glm::detail::tvec2<float> > { 
            struct tvec2<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
                union { 
                    float y; 
                    float g; 
                    float t; 
                } ; 
            } mMin; 
            struct tvec2<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
                union { 
                    float y; 
                    float g; 
                    float t; 
                } ; 
            } mMax; 
        } mChart; 
        struct box<glm::detail::tvec2<float> > { 
            struct tvec2<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
                union { 
                    float y; 
                    float g; 
                    float t; 
                } ; 
            } mMin; 
            struct tvec2<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
                union { 
                    float y; 
                    float g; 
                    float t; 
                } ; 
            } mMax; 
        } mOrient; 
        struct box<glm::detail::tvec2<float> > { 
            struct tvec2<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
                union { 
                    float y; 
                    float g; 
                    float t; 
                } ; 
            } mMin; 
            struct tvec2<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
                union { 
                    float y; 
                    float g; 
                    float t; 
                } ; 
            } mMax; 
        } mDrawing; 
        struct box<glm::detail::tvec2<float> > { 
            struct tvec2<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
                union { 
                    float y; 
                    float g; 
                    float t; 
                } ; 
            } mMin; 
            struct tvec2<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
                union { 
                    float y; 
                    float g; 
                    float t; 
                } ; 
            } mMax; 
        } mLayout; 
        struct box<glm::detail::tvec2<float> > { 
            struct tvec2<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
                union { 
                    float y; 
                    float g; 
                    float t; 
                } ; 
            } mMin; 
            struct tvec2<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
                union { 
                    float y; 
                    float g; 
                    float t; 
                } ; 
            } mMax; 
        } mLayoutInPage; 
        struct box<glm::detail::tvec2<float> > { 
            struct tvec2<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
                union { 
                    float y; 
                    float g; 
                    float t; 
                } ; 
            } mMin; 
            struct tvec2<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
                union { 
                    float y; 
                    float g; 
                    float t; 
                } ; 
            } mMax; 
        } mBodyLayout; 
        struct box<glm::detail::tvec2<float> > { 
            struct tvec2<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
                union { 
                    float y; 
                    float g; 
                    float t; 
                } ; 
            } mMin; 
            struct tvec2<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
                union { 
                    float y; 
                    float g; 
                    float t; 
                } ; 
            } mMax; 
        } mBodyLayoutInPage; 
        struct box<glm::detail::tvec2<float> > { 
            struct tvec2<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
                union { 
                    float y; 
                    float g; 
                    float t; 
                } ; 
            } mMin; 
            struct tvec2<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
                union { 
                    float y; 
                    float g; 
                    float t; 
                } ; 
            } mMax; 
        } mContainingViewport; 
    TSCH3DSelectionPath *mActive3DTextEditingPath;
    } mAnimationBounds;
    BOOL mCanRender;
    BOOL mHasAnimationBounds;
    BOOL mResetTrackingOnNextRender;
}

@property(readonly) BOOL canRender;
@property BOOL resetTrackingOnNextRender;
@property(retain) TSCH3DChartSceneAreaLayoutItem * sceneAreaLayoutItem;

- (id).cxx_construct;
- (void)addSelection:(id)arg1 toCGPath:(struct CGPath { }*)arg2;
- (BOOL)allocateFramebufferForBodyCanvasVisibleRect:(const struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg1;
- (const struct ChartProjectedBoundsSpaces { struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x_1_3_1; float x_1_3_2; float x_1_3_3; } x_1_2_1; union { float x_2_3_1; float x_2_3_2; float x_2_3_3; } x_1_2_2; } x_1_1_1; struct tvec2<float> { union { float x_1_3_1; float x_1_3_2; float x_1_3_3; } x_2_2_1; union { float x_2_3_1; float x_2_3_2; float x_2_3_3; } x_2_2_2; } x_1_1_2; } x1; struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x_1_3_1; float x_1_3_2; float x_1_3_3; } x_1_2_1; union { float x_2_3_1; float x_2_3_2; float x_2_3_3; } x_1_2_2; } x_2_1_1; struct tvec2<float> { union { float x_1_3_1; float x_1_3_2; float x_1_3_3; } x_2_2_1; union { float x_2_3_1; float x_2_3_2; float x_2_3_3; } x_2_2_2; } x_2_1_2; } x2; struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x_1_3_1; float x_1_3_2; float x_1_3_3; } x_1_2_1; union { float x_2_3_1; float x_2_3_2; float x_2_3_3; } x_1_2_2; } x_3_1_1; struct tvec2<float> { union { float x_1_3_1; float x_1_3_2; float x_1_3_3; } x_2_2_1; union { float x_2_3_1; float x_2_3_2; float x_2_3_3; } x_2_2_2; } x_3_1_2; } x3; struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x_1_3_1; float x_1_3_2; float x_1_3_3; } x_1_2_1; union { float x_2_3_1; float x_2_3_2; float x_2_3_3; } x_1_2_2; } x_4_1_1; struct tvec2<float> { union { float x_1_3_1; float x_1_3_2; float x_1_3_3; } x_2_2_1; union { float x_2_3_1; float x_2_3_2; float x_2_3_3; } x_2_2_2; } x_4_1_2; } x4; struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x_1_3_1; float x_1_3_2; float x_1_3_3; } x_1_2_1; union { float x_2_3_1; float x_2_3_2; float x_2_3_3; } x_1_2_2; } x_5_1_1; struct tvec2<float> { union { float x_1_3_1; float x_1_3_2; float x_1_3_3; } x_2_2_1; union { float x_2_3_1; float x_2_3_2; float x_2_3_3; } x_2_2_2; } x_5_1_2; } x5; struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x_1_3_1; float x_1_3_2; float x_1_3_3; } x_1_2_1; union { float x_2_3_1; float x_2_3_2; float x_2_3_3; } x_1_2_2; } x_6_1_1; struct tvec2<float> { union { float x_1_3_1; float x_1_3_2; float x_1_3_3; } x_2_2_1; union { float x_2_3_1; float x_2_3_2; float x_2_3_3; } x_2_2_2; } x_6_1_2; } x6; struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x_1_3_1; float x_1_3_2; float x_1_3_3; } x_1_2_1; union { float x_2_3_1; float x_2_3_2; float x_2_3_3; } x_1_2_2; } x_7_1_1; struct tvec2<float> { union { float x_1_3_1; float x_1_3_2; float x_1_3_3; } x_2_2_1; union { float x_2_3_1; float x_2_3_2; float x_2_3_3; } x_2_2_2; } x_7_1_2; } x7; struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x_1_3_1; float x_1_3_2; float x_1_3_3; } x_1_2_1; union { float x_2_3_1; float x_2_3_2; float x_2_3_3; } x_1_2_2; } x_8_1_1; struct tvec2<float> { union { float x_1_3_1; float x_1_3_2; float x_1_3_3; } x_2_2_1; union { float x_2_3_1; float x_2_3_2; float x_2_3_3; } x_2_2_2; } x_8_1_2; } x8; }*)animationBounds;
- (void)cacheAnimationBoundsForScene:(id)arg1;
- (BOOL)canEditTextForSelectionPath:(id)arg1;
- (BOOL)canRender;
- (BOOL)canRenderSelectionPath:(id)arg1;
- (int)chunkPlane;
- (void)clearCachedAnimationBounds;
- (void)dealloc;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })frameForEditingTextForSelectionPath:(id)arg1;
- (id)initWithChartRep:(id)arg1 layoutItem:(id)arg2;
- (void)multipassRenderingDidEnd;
- (BOOL)multipassRenderingIsDone;
- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })p_affineTransformForFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 rotation:(float)arg2;
- (struct ChartProjectedBoundsConverter { struct ChartProjectedBoundsSpaces {} *x1; float x2; boolx3; struct tvec2<float> { union { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_4_1_1; union { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_4_1_2; } x4; })p_boundsConverter;
- (void)p_debugLogConverter:(const struct ChartProjectedBoundsConverter { struct ChartProjectedBoundsSpaces {} *x1; float x2; boolx3; struct tvec2<float> { union { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_4_1_1; union { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_4_1_2; } x4; }*)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })p_frameForSelectionPath:(id)arg1 sceneObjectClass:(Class)arg2;
- (void)p_layoutForRenderPipeline:(id)arg1;
- (BOOL)p_multipassCanRender;
- (id)p_renderPipelineForScene:(id)arg1;
- (id)p_renderPipelineWithUpdatedLayoutForScene:(id)arg1;
- (id)p_sceneObjectFromSelectionPath:(id)arg1;
- (id)p_state;
- (id)p_upgradeSelectionPathTo3D:(id)arg1;
- (void)presentFramebufferForPipeline:(id)arg1 CGContext:(struct CGContext { }*)arg2 highQuality:(BOOL)arg3 cleanupRendering:(BOOL)arg4;
- (void)processMultipassRendering;
- (void)renderIntoContext:(struct CGContext { }*)arg1 bodyCanvasVisibleRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 scene:(id)arg3 GLContext:(id)arg4 needLayout:(BOOL)arg5;
- (void)renderIntoContext:(struct CGContext { }*)arg1 selection:(id)arg2;
- (void)renderIntoContext:(struct CGContext { }*)arg1 visible:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (id)rep3D;
- (void)resetMultipassRendering;
- (BOOL)resetTrackingOnNextRender;
- (id)sceneAreaLayoutItem;
- (void)setResetTrackingOnNextRender:(BOOL)arg1;
- (void)setSceneAreaLayoutItem:(id)arg1;
- (void)textEditingDidEnd;
- (id)textIdentifierAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)updateLayout;
- (BOOL)usesMultipassRendering;

@end
