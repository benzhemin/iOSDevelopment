/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class <TSDCanvasDelegate>, NSArray, NSSet, TSDInteractiveCanvasController, TSDLayoutController, TSKAccessController, TSKChangeNotifier, TSKDocumentRoot, TSPObjectContext;

@interface TSDCanvas : NSObject {
    struct CGSize { 
        float width; 
        float height; 
    struct { 
        unsigned int layout : 1; 
        unsigned int reps : 1; 
        unsigned int visibleBounds : 1; 
        unsigned int layers : 1; 
    struct UIEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    NSSet *mAllReps;
    BOOL mAllowsFontSubpixelQuantization;
    struct CGColor { } *mBackgroundColor;
    TSDInteractiveCanvasController *mCanvasController;
    BOOL mClipToCanvas;
    } mContentInset;
    float mContentsScale;
    <TSDCanvasDelegate> *mDelegate;
    BOOL mIgnoringClickThrough;
    BOOL mInLayout;
    NSArray *mInfos;
    } mInvalidFlags;
    BOOL mIsTemporaryForLayout;
    TSDLayoutController *mLayoutController;
    NSArray *mPreviouslyVisibleLayouts;
    struct __CFDictionary { } *mRepsByLayout;
    BOOL mSuppressesShadowsAndReflections;
    NSArray *mTopLevelReps;
    } mUnscaledSize;
    float mViewScale;
}

@property(readonly) TSKAccessController * accessController;
@property BOOL allowsFontSubpixelQuantization;
@property struct CGColor { }* backgroundColor;
@property(readonly) TSDInteractiveCanvasController * canvasController;
@property(readonly) TSKChangeNotifier * changeNotifier;
@property struct UIEdgeInsets { float x1; float x2; float x3; float x4; } contentInset;
@property <TSDCanvasDelegate> * delegate;
@property(readonly) TSKDocumentRoot * documentRoot;
@property(copy) NSArray * infosToDisplay;
@property(readonly) BOOL isCanvasInteractive;
@property(readonly) BOOL isTemporaryForLayout;
@property(readonly) TSDLayoutController * layoutController;
@property(readonly) TSPObjectContext * objectContext;
@property(readonly) BOOL supportsAdaptiveLayout;
@property BOOL suppressesShadowsAndReflections;
@property struct CGSize { float x1; float x2; } unscaledSize;
@property float viewScale;

- (id)accessController;
- (void)addBitmapsToRenderingQualityInfo:(id)arg1 inContext:(struct CGContext { }*)arg2;
- (id)allReps;
- (BOOL)allowsFontSubpixelQuantization;
- (struct CGColor { }*)backgroundColor;
- (id)canvasController;
- (id)changeNotifier;
- (id)commandController;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })contentInset;
- (float)contentsScale;
- (struct CGPoint { float x1; float x2; })convertBoundsToUnscaledPoint:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })convertBoundsToUnscaledRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct CGSize { float x1; float x2; })convertBoundsToUnscaledSize:(struct CGSize { float x1; float x2; })arg1;
- (struct CGPoint { float x1; float x2; })convertUnscaledToBoundsPoint:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })convertUnscaledToBoundsRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct CGSize { float x1; float x2; })convertUnscaledToBoundsSize:(struct CGSize { float x1; float x2; })arg1;
- (void)dealloc;
- (id)delegate;
- (id)documentRoot;
- (id)hitRep:(struct CGPoint { float x1; float x2; })arg1 inTopLevelReps:(id)arg2 smallRepOutset:(float)arg3 passingTest:(id)arg4;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })i_approximateScaledFrameOfEditingMenuAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })i_clipRectForCreatingRepsFromLayouts;
- (void)i_clipsImagesToBounds:(BOOL)arg1;
- (struct CGContext { }*)i_createContextToDrawImageInScaledRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withTargetIntegralSize:(struct CGSize { float x1; float x2; })arg2 returningBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg3 integralBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg4 forceSRGB:(BOOL)arg5;
- (void)i_drawBackgroundInContext:(struct CGContext { }*)arg1 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (void)i_drawBackgroundInContext:(struct CGContext { }*)arg1;
- (void)i_drawRepsInContext:(struct CGContext { }*)arg1 distort:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg2;
- (void)i_drawRepsInContext:(struct CGContext { }*)arg1;
- (struct CGImage { }*)i_image;
- (struct CGImage { }*)i_imageInScaledRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 forceSRGB:(BOOL)arg2;
- (struct CGImage { }*)i_imageInScaledRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withTargetIntegralSize:(struct CGSize { float x1; float x2; })arg2 distortedToMatch:(BOOL)arg3 forceSRGB:(BOOL)arg4;
- (BOOL)i_needsLayout;
- (struct CGImage { }*)i_newImageInContext:(struct CGContext { }*)arg1 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 integralBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 distortedToMatch:(BOOL)arg4;
- (void)i_performBlockWhileIgnoringClickThrough:(id)arg1;
- (void)i_registerRep:(id)arg1;
- (void)i_setCanvasController:(id)arg1;
- (void)i_setContentsScale:(float)arg1;
- (void)i_setInfosToDisplay:(id)arg1 updatingLayoutController:(BOOL)arg2;
- (BOOL)i_shouldIgnoreClickThrough;
- (void)i_unregisterRep:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })i_unscaledRectOfLayouts;
- (void)i_updateInfosInLayoutController;
- (id)infosToDisplay;
- (id)init;
- (id)initForTemporaryLayout;
- (void)invalidateLayers;
- (void)invalidateReps;
- (void)invalidateVisibleBounds;
- (BOOL)isCanvasInteractive;
- (BOOL)isDrawingIntoPDF;
- (BOOL)isPrinting;
- (BOOL)isTemporaryForLayout;
- (id)layoutController;
- (void)layoutIfNeeded;
- (void)layoutInvalidated;
- (id)objectContext;
- (void)orderRepsForLayout:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })p_bounds;
- (BOOL)p_expandHitRegionOfPoint:(struct CGPoint { float x1; float x2; })arg1 forRep:(id)arg2 smallRepOutset:(float)arg3 forShortestDistance:(float*)arg4;
- (void)p_layoutWithReadLock;
- (void)p_removeAllReps;
- (BOOL)p_shouldRep:(id)arg1 countAsClosestSmallRepForSizeLimit:(float)arg2;
- (BOOL)p_updateRepsFromLayouts;
- (void)recreateAllLayoutsAndReps;
- (id)repForLayout:(id)arg1;
- (void)setAllowsFontSubpixelQuantization:(BOOL)arg1;
- (void)setBackgroundColor:(struct CGColor { }*)arg1;
- (void)setContentInset:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setInfosToDisplay:(id)arg1;
- (void)setSuppressesShadowsAndReflections:(BOOL)arg1;
- (void)setUnscaledSize:(struct CGSize { float x1; float x2; })arg1;
- (void)setViewScale:(float)arg1;
- (BOOL)shouldShowInstructionalText;
- (BOOL)shouldShowTextOverflowGlyphs;
- (BOOL)shouldSuppressBackgrounds;
- (BOOL)spellCheckingSupported;
- (BOOL)spellCheckingSuppressed;
- (BOOL)supportsAdaptiveLayout;
- (BOOL)suppressesShadowsAndReflections;
- (void)teardown;
- (id)textRendererForLayer:(id)arg1 context:(struct CGContext { }*)arg2;
- (id)topLevelReps;
- (struct CGSize { float x1; float x2; })unscaledSize;
- (float)viewScale;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })visibleUnscaledRectForClippingReps;

@end
