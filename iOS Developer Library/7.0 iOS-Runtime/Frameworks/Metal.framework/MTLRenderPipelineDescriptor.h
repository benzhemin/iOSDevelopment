/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Metal.framework/Metal
 */

@class <MTLFunction>, MTLRenderPipelineColorAttachmentDescriptorArray, MTLVertexDescriptor, NSString;

@interface MTLRenderPipelineDescriptor : NSObject <NSCopying> {
    struct MTLRenderPipelineDescriptorPrivate { 
        MTLRenderPipelineColorAttachmentDescriptorArray *attachments; 
        unsigned int rtBlendDescHash[8]; 
        unsigned int depthAttachmentPixelFormat; 
        unsigned int stencilAttachmentPixelFormat; 
        unsigned int sampleCount; 
        unsigned int sampleMask; 
        union { 
            unsigned int sampleCoverageHash; 
            float sampleCoverage; 
        } ; 
        union { 
            unsigned int miscHash; 
            struct { 
                unsigned int alphaToCoverageEnabled : 1; 
                unsigned int alphaToOneEnabled : 1; 
                unsigned int rasterizationEnabled : 1; 
                unsigned int pad : 29; 
            } ; 
        } ; 
        NSString *label; 
        unsigned int labelHash; 
        unsigned int vertexFunctionHash; 
        unsigned int fragmentFunctionHash; 
        unsigned int vertexDescriptorHash; 
        <MTLFunction> *vertexFunction; 
        <MTLFunction> *fragmentFunction; 
        MTLVertexDescriptor *vertexDescriptor; 
    } _private;
}

@property(getter=isAlphaToCoverageEnabled) BOOL alphaToCoverageEnabled;
@property(getter=isAlphaToOneEnabled) BOOL alphaToOneEnabled;
@property(readonly) MTLRenderPipelineColorAttachmentDescriptorArray * colorAttachments;
@property unsigned int depthAttachmentPixelFormat;
@property(retain) <MTLFunction> * fragmentFunction;
@property(copy) NSString * label;
@property(getter=isRasterizationEnabled) BOOL rasterizationEnabled;
@property unsigned int sampleCount;
@property unsigned int stencilAttachmentPixelFormat;
@property(copy) MTLVertexDescriptor * vertexDescriptor;
@property(retain) <MTLFunction> * vertexFunction;

- (id).cxx_construct;
- (const struct MTLRenderPipelineDescriptorPrivate { id x1; unsigned int x2[8]; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; union { unsigned int x_7_1_1; float x_7_1_2; } x7; union { unsigned int x_8_1_1; struct { unsigned int x_2_2_1 : 1; unsigned int x_2_2_2 : 1; unsigned int x_2_2_3 : 1; unsigned int x_2_2_4 : 29; } x_8_1_2; } x8; id x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; id x14; id x15; id x16; }*)_descriptorPrivate;
- (id)colorAttachments;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (unsigned int)depthAttachmentPixelFormat;
- (id)description;
- (id)fastBlendDescriptorAtIndex:(unsigned int)arg1;
- (id)fragmentFunction;
- (unsigned int)hash;
- (id)init;
- (BOOL)isAlphaToCoverageEnabled;
- (BOOL)isAlphaToOneEnabled;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isRasterizationEnabled;
- (id)label;
- (void)reset;
- (unsigned int)sampleCount;
- (float)sampleCoverage;
- (unsigned int)sampleMask;
- (id)serializeFragmentData;
- (void)setAlphaToCoverageEnabled:(BOOL)arg1;
- (void)setAlphaToOneEnabled:(BOOL)arg1;
- (void)setDepthAttachmentPixelFormat:(unsigned int)arg1;
- (void)setFragmentFunction:(id)arg1;
- (void)setLabel:(id)arg1;
- (void)setRasterizationEnabled:(BOOL)arg1;
- (void)setSampleCount:(unsigned int)arg1;
- (void)setSampleCoverage:(float)arg1;
- (void)setSampleMask:(unsigned int)arg1;
- (void)setStencilAttachmentPixelFormat:(unsigned int)arg1;
- (void)setVertexDescriptor:(id)arg1;
- (void)setVertexFunction:(id)arg1;
- (unsigned int)stencilAttachmentPixelFormat;
- (BOOL)validate;
- (void)validateWithDevice:(id)arg1;
- (id)vertexDescriptor;
- (id)vertexFunction;

@end
