/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MobileTimer.framework/MobileTimer
 */

@class NSCalendar, NSDate, NSTimeZone, UIImage, UIImageView, UIView<HandView>;

@interface AnalogClockView : UIView <Clock> {
    NSCalendar *_calendar;
    UIView<HandView> *_dayHands[3];
    UIImage *_faceDayImage;
    UIImage *_faceNightImage;
    UIImageView *_faceView;
    int _flutterIndex;
    BOOL _isRenderStateStale;
    UIImageView *_middleDotDay;
    UIImageView *_middleDotNight;
    UIImageView *_middleRedDot;
    BOOL _minuteHourAnimationTriggered;
    UIView<HandView> *_nightHands[3];
    BOOL _nighttime;
    int _runMode;
    double _seconds;
    NSDate *_time;
}

@property(readonly) UIImageView * faceView;
@property(readonly) int hour;
@property(readonly) int minute;
@property(getter=isNighttime,readonly) BOOL nighttime;
@property int runMode;
@property(getter=isStarted,readonly) BOOL started;
@property(readonly) int style;
@property(retain) NSDate * time;
@property(retain) NSTimeZone * timeZone;

+ (void)adjustNumberalCenter:(struct CGPoint { float x1; float x2; }*)arg1 forNumeralIndex:(int)arg2;
+ (id)analogClockWithStyle:(int)arg1;
+ (id)cacheTopLevelPath;
+ (id)cacheVersionHash;
+ (id)cacheVersionedPath;
+ (Class)classForStyle:(int)arg1;
+ (id)clockFaceForDaytime:(BOOL)arg1;
+ (id)clockHand:(int)arg1 daytime:(BOOL)arg2;
+ (struct CGSize { float x1; float x2; })clockSize;
+ (id)dayTimeFaceColor;
+ (id)dayTimeOverHourHandDotColor;
+ (id)dayTimeTextColor;
+ (BOOL)doesFaceHaveShadow;
+ (float)faceRadius;
+ (struct CGPoint { float x1; float x2; })handRotationalCenterForHand:(int)arg1;
+ (BOOL)hasOverHourHandDot;
+ (BOOL)hasOverSecondHandDot;
+ (float)hourHandLength;
+ (float)hourHandWidth;
+ (id)imageCacheNameForType:(int)arg1 daytime:(BOOL)arg2;
+ (id)imageForType:(int)arg1 dayTime:(BOOL)arg2 generation:(id)arg3;
+ (id)imageInBundleForName:(id)arg1;
+ (void)initialize;
+ (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })insetsForStyle:(int)arg1;
+ (BOOL)isClockRegistered:(id)arg1;
+ (id)makeClockFaceForDaytime:(BOOL)arg1;
+ (id)makeClockHand:(int)arg1 daytime:(BOOL)arg2;
+ (id)makeDotImageSize:(float)arg1 color:(id)arg2;
+ (id)makeOverSecondHandDotImage;
+ (float)minuteHandLength;
+ (float)minuteHandWidth;
+ (id)nightTimeFaceColor;
+ (id)nightTimeOverHourHandDotColor;
+ (id)nightTimeTextColor;
+ (id)numeralFont;
+ (float)numeralInset;
+ (id)overHourHandDotForDayTime:(BOOL)arg1;
+ (id)overHourHandDotImageForDaytime:(BOOL)arg1;
+ (float)overHourHandDotSize;
+ (id)overSecondHandDotColor;
+ (id)overSecondHandDotImage;
+ (float)overSecondHandDotSize;
+ (void)registerClock:(id)arg1;
+ (void)registerSweepingClock:(id)arg1;
+ (void)registerTickingClock:(id)arg1;
+ (id)resourcePath;
+ (float)secondHandLength;
+ (float)secondHandWidth;
+ (struct ShadowInfo { id x1; float x2; struct CGSize { float x_3_1_1; float x_3_1_2; } x3; float x4; })shadowInfoAtIndex:(unsigned int)arg1;
+ (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })shadowInsets;
+ (struct CGPoint { float x1; float x2; })shadowRotationalCenterForHand:(int)arg1;
+ (BOOL)shouldCacheImageOnDiskForType:(int)arg1 dayTime:(BOOL)arg2;
+ (struct CGSize { float x1; float x2; })sizeForStyle:(int)arg1;
+ (int)style;
+ (void)unregisterClock:(id)arg1;
+ (void)unregisterSweepingClock:(id)arg1;
+ (void)unregisterTickingClock:(id)arg1;
+ (void)updateFlutterForAllTicking;
+ (void)updateTimeForAllSweeping;
+ (void)updateTimeForAllTicking;

- (double)coarseUpdateInterval;
- (void)dealloc;
- (id)faceView;
- (int)hour;
- (id)init;
- (struct CGSize { float x1; float x2; })intrinsicContentSize;
- (BOOL)isNighttime;
- (BOOL)isStarted;
- (int)minute;
- (int)runMode;
- (void)setFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setHandAngle:(float)arg1 forHandIndex:(int)arg2;
- (void)setHandTransformForHandIndex:(int)arg1;
- (void)setNighttime:(BOOL)arg1;
- (void)setRunMode:(int)arg1;
- (void)setTime:(id)arg1 animated:(BOOL)arg2;
- (void)setTime:(id)arg1;
- (void)setTimeZone:(id)arg1;
- (void)start;
- (void)stop;
- (int)style;
- (id)time;
- (id)timeZone;
- (void)updateFlutter;
- (double)updateInterval;
- (void)updateTime;
- (void)updateTimeAnimated:(BOOL)arg1;
- (void)updateTimeContinuously:(int)arg1;

@end
