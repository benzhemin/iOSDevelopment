/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/WebCore.framework/WebCore
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class CALayer, WAKView;

@interface WAKWindow : WAKResponder {
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    struct CGSize { 
        float width; 
        float height; 
    struct CGSize { 
        float width; 
        float height; 
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    struct TCMalloc_SpinLock { 
        unsigned int lockword_; 
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } _availableScreenSize;
    WAKView *_contentView;
    } _exposedScrollViewRect;
    } _exposedScrollViewRectLock;
    } _frame;
    } _frozenVisibleRect;
    CALayer *_hostLayer;
    WAKView *_nextResponder;
    WAKView *_responderView;
    CALayer *_rootLayer;
    float _screenScale;
    } _screenSize;
    struct LegacyTileCache { id x1; struct RetainPtr<CGImage *> { void *x_2_1_1; } x2; boolx3; boolx4; boolx5; struct RetainPtr<LegacyTileCacheTombstone> { void *x_6_1_1; } x6; int x7; int x8; struct IntSize { int x_9_1_1; int x_9_1_2; } x9; boolx10; boolx11; boolx12; boolx13; boolx14; boolx15; struct OwnPtr<WebCore::LegacyTileGrid> { struct LegacyTileGrid {} *x_16_1_1; } x16; struct OwnPtr<WebCore::LegacyTileGrid> { struct LegacyTileGrid {} *x_17_1_1; } x17; struct Timer<WebCore::LegacyTileCache> { int (**x_18_1_1)(); double x_18_1_2; double x_18_1_3; double x_18_1_4; int x_18_1_5; unsigned int x_18_1_6; struct Vector<WebCore::TimerBase *, 0, WTF::CrashOnOverflow> {} *x_18_1_7; struct function<void ()>={type=[12C] {} x_18_1_8; struct __base<void ()> {} *x_18_1_9; } x18; } *_tileCache;
    BOOL _useOrientationDependentFontAntialiasing;
    BOOL _visible;
}

@property struct CGImage { }* contentReplacementImage;
@property BOOL useOrientationDependentFontAntialiasing;

+ (id)currentEvent;
+ (BOOL)hasLandscapeOrientation;
+ (void)setOrientationProvider:(id)arg1;

- (struct LegacyTileCache { id x1; struct RetainPtr<CGImage *> { void *x_2_1_1; } x2; boolx3; boolx4; boolx5; struct RetainPtr<LegacyTileCacheTombstone> { void *x_6_1_1; } x6; int x7; int x8; struct IntSize { int x_9_1_1; int x_9_1_2; } x9; boolx10; boolx11; boolx12; boolx13; boolx14; boolx15; struct OwnPtr<WebCore::LegacyTileGrid> { struct LegacyTileGrid {} *x_16_1_1; } x16; struct OwnPtr<WebCore::LegacyTileGrid> { struct LegacyTileGrid {} *x_17_1_1; } x17; struct Timer<WebCore::LegacyTileCache> { int (**x_18_1_1)(); double x_18_1_2; double x_18_1_3; double x_18_1_4; int x_18_1_5; unsigned int x_18_1_6; struct Vector<WebCore::TimerBase *, 0, WTF::CrashOnOverflow> {} *x_18_1_7; struct function<void ()>={type=[12C] {} x_18_1_8; struct __base<void ()> {} *x_18_1_9; } x18; }*)tileCache;
- (id).cxx_construct;
- (id)_newFirstResponderAfterResigning;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_visibleRectRespectingMasksToBounds:(BOOL)arg1;
- (struct CGSize { float x1; float x2; })availableScreenSize;
- (void)close;
- (struct CGImage { }*)contentReplacementImage;
- (id)contentView;
- (struct CGPoint { float x1; float x2; })convertBaseToScreen:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGPoint { float x1; float x2; })convertScreenToBase:(struct CGPoint { float x1; float x2; })arg1;
- (float)currentTileScale;
- (void)dealloc;
- (id)description;
- (void)didRotate;
- (void)displayRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)dumpTiles;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })exposedScrollViewRect;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })extendedVisibleRect;
- (id)firstResponder;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })frame;
- (void)freezeVisibleRect;
- (BOOL)hasPendingDraw;
- (id)hostLayer;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)initWithLayer:(id)arg1;
- (BOOL)isKeyWindow;
- (BOOL)isVisible;
- (BOOL)keepsZoomedOutTiles;
- (int)keyViewSelectionDirection;
- (void)layoutTiles;
- (void)layoutTilesNow;
- (void)layoutTilesNowForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)makeFirstResponder:(id)arg1;
- (void)makeKeyWindow;
- (id)recursiveDescription;
- (void)removeAllNonVisibleTiles;
- (void)removeAllTiles;
- (void)removeForegroundTiles;
- (id)rootLayer;
- (float)screenScale;
- (struct CGSize { float x1; float x2; })screenSize;
- (void)sendEvent:(id)arg1;
- (void)sendEventSynchronously:(id)arg1;
- (void)sendMouseMoveEvent:(id)arg1 contentChange:(int*)arg2;
- (void)setAcceleratedDrawingEnabled:(BOOL)arg1;
- (void)setAvailableScreenSize:(struct CGSize { float x1; float x2; })arg1;
- (void)setContentRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setContentReplacementImage:(struct CGImage { }*)arg1;
- (void)setContentView:(id)arg1;
- (void)setCurrentTileScale:(float)arg1;
- (void)setExposedScrollViewRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 display:(BOOL)arg2;
- (void)setKeepsZoomedOutTiles:(BOOL)arg1;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setRootLayer:(id)arg1;
- (void)setScreenScale:(float)arg1;
- (void)setScreenSize:(struct CGSize { float x1; float x2; })arg1;
- (void)setTileBordersVisible:(BOOL)arg1;
- (void)setTileControllerShouldUseLowScaleTiles:(BOOL)arg1;
- (void)setTilePaintCountsVisible:(BOOL)arg1;
- (void)setTilesOpaque:(BOOL)arg1;
- (void)setTilingDirection:(int)arg1;
- (void)setTilingMode:(int)arg1;
- (void)setUseOrientationDependentFontAntialiasing:(BOOL)arg1;
- (void)setVisible:(BOOL)arg1;
- (void)setZoomedOutTileScale:(float)arg1;
- (BOOL)tilesOpaque;
- (int)tilingDirection;
- (int)tilingMode;
- (void)unfreezeVisibleRect;
- (BOOL)useOrientationDependentFontAntialiasing;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })visibleRect;
- (void)willRotate;
- (float)zoomedOutTileScale;

@end
