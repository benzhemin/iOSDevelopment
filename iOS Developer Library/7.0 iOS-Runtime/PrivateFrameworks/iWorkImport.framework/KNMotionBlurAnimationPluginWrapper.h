/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class KNMotionBlurWrapper, NSArray, NSDictionary, NSObject<KNAnimationPluginAnimationRendering>;

@interface KNMotionBlurAnimationPluginWrapper : NSObject {
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    struct CATransform3D { 
        float m11; 
        float m12; 
        float m13; 
        float m14; 
        float m21; 
        float m22; 
        float m23; 
        float m24; 
        float m31; 
        float m32; 
        float m33; 
        float m34; 
        float m41; 
        float m42; 
        float m43; 
        float m44; 
    NSDictionary *_animationCacheDict;
    NSDictionary *_animationDict;
    } _animationFrame;
    NSObject<KNAnimationPluginAnimationRendering> *_animationPlugin;
    } _drawableFrame;
    NSArray *_generatedTextures;
    BOOL _isSetup;
    KNMotionBlurWrapper *_motionBlurWrapper;
    } _projectionTransform;
    BOOL _shouldDrawMotionBlur;
    BOOL _shouldGenerateNewTexturesFromLayers;
    id _textureDrawOptionsBlock;
}

@property struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } animationFrame;
@property NSObject<KNAnimationPluginAnimationRendering> * animationPlugin;
@property struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } drawableFrame;
@property BOOL isSetup;
@property(readonly) KNMotionBlurWrapper * motionBlurWrapper;
@property struct CATransform3D { float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; } projectionTransform;
@property BOOL shouldDrawMotionBlur;
@property BOOL shouldGenerateNewTexturesFromLayers;

- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })animationFrame;
- (id)animationPlugin;
- (void)dealloc;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })drawableFrame;
- (id)initWithAnimationPlugin:(id)arg1 drawableFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 animationFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (BOOL)isSetup;
- (id)motionBlurWrapper;
- (id)p_generatedTexturesFromLayersInAnimationDict:(id)arg1 context:(id)arg2 animationContext:(id)arg3 textures:(id)arg4;
- (struct CATransform3D { float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; })p_projectionTransformWithType:(int)arg1 customProjectionTransform:(struct CATransform3D { float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; })arg2 context:(id)arg3 animationContext:(id)arg4;
- (void)p_setupAnimationDictionariesWithAnimationDict:(id)arg1 context:(id)arg2;
- (struct CATransform3D { float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; })projectionTransform;
- (void)renderFrameWithContext:(id)arg1;
- (void)setAnimationFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setAnimationPlugin:(id)arg1;
- (void)setDrawableFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setIsSetup:(BOOL)arg1;
- (void)setProjectionTransform:(struct CATransform3D { float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; })arg1;
- (void)setShouldDrawMotionBlur:(BOOL)arg1;
- (void)setShouldGenerateNewTexturesFromLayers:(BOOL)arg1;
- (void)setupWithContext:(id)arg1 animationContext:(id)arg2 animationDict:(id)arg3 textures:(id)arg4 projectionTransformType:(int)arg5 customProjectionTransform:(struct CATransform3D { float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; })arg6;
- (void)setupWithContext:(id)arg1 animationContext:(id)arg2 orthographicProjection:(BOOL)arg3;
- (BOOL)shouldDrawMotionBlur;
- (BOOL)shouldGenerateNewTexturesFromLayers;
- (void)teardown;

@end
