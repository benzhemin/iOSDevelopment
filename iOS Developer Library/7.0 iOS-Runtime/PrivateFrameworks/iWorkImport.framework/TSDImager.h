/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class NSArray, NSString, TSDCanvas, TSKDocumentRoot;

@interface TSDImager : NSObject <TSDCanvasDelegate> {
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    struct CGSize { 
        float width; 
        float height; 
    struct CGSize { 
        float width; 
        float height; 
    struct UIEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    struct CGSize { 
        float width; 
        float height; 
    } mActualScaledClipRect;
    struct CGColor { } *mBackgroundColor;
    TSDCanvas *mCanvas;
    } mContentInset;
    BOOL mDistortedToMatch;
    TSKDocumentRoot *mDocumentRoot;
    BOOL mDrawingIntoPDF;
    BOOL mImageMustHaveEvenDimensions;
    NSArray *mInfos;
    BOOL mIsPrinting;
    } mMaximumScaledImageSize;
    id mPostRenderAction;
    } mReusableActualScaledClipRect;
    struct CGContext { } *mReusableBitmapContext;
    } mReusableBounds;
    } mReusableIntegralBounds;
    } mReusableScaledImageSize;
    BOOL mReusableShouldUseSRGBColorSpace;
    } mScaledImageSize;
    BOOL mShouldReuseBitmapContext;
    BOOL mShouldUseSRGBColorSpace;
    } mUnscaledClipRect;
    BOOL mUseScaledImageSize;
    float mViewScale;
}

@property(readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } actualScaledClipRect;
@property struct CGColor { }* backgroundColor;
@property(retain,readonly) TSDCanvas * canvas;
@property struct UIEdgeInsets { float x1; float x2; float x3; float x4; } contentInset;
@property(copy,readonly) NSString * debugDescription;
@property(copy,readonly) NSString * description;
@property BOOL distortedToMatch;
@property(readonly) unsigned int hash;
@property BOOL imageMustHaveEvenDimensions;
@property(retain) NSArray * infos;
@property BOOL isPrinting;
@property struct CGSize { float x1; float x2; } maximumScaledImageSize;
@property struct CGSize { float x1; float x2; } scaledImageSize;
@property BOOL shouldReuseBitmapContext;
@property(readonly) Class superclass;
@property struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } unscaledClipRect;
@property float viewScale;

- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })actualScaledClipRect;
- (struct CGColor { }*)backgroundColor;
- (id)canvas;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })contentInset;
- (void)dealloc;
- (BOOL)distortedToMatch;
- (id)documentRoot;
- (BOOL)drawPageInContext:(struct CGContext { }*)arg1 createPage:(BOOL)arg2;
- (BOOL)imageMustHaveEvenDimensions;
- (id)infos;
- (id)initWithDocumentRoot:(id)arg1;
- (BOOL)isCanvasDrawingIntoPDF:(id)arg1;
- (BOOL)isPrinting;
- (BOOL)isPrintingCanvas;
- (struct CGSize { float x1; float x2; })maximumScaledImageSize;
- (struct CGImage { }*)newImage;
- (BOOL)p_configureCanvas;
- (void)p_drawPageInContext:(struct CGContext { }*)arg1 createPage:(BOOL)arg2;
- (struct CGImage { }*)p_newImageInReusableContext;
- (id)pdfData;
- (struct CGSize { float x1; float x2; })scaledImageSize;
- (void)setBackgroundColor:(struct CGColor { }*)arg1;
- (void)setContentInset:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)setDistortedToMatch:(BOOL)arg1;
- (void)setImageMustHaveEvenDimensions:(BOOL)arg1;
- (void)setInfos:(id)arg1;
- (void)setIsPrinting:(BOOL)arg1;
- (void)setMaximumScaledImageSize:(struct CGSize { float x1; float x2; })arg1;
- (void)setPostRenderAction:(id)arg1;
- (void)setScaledImageSize:(struct CGSize { float x1; float x2; })arg1;
- (void)setShouldReuseBitmapContext:(BOOL)arg1;
- (void)setUnscaledClipRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setViewScale:(float)arg1;
- (BOOL)shouldReuseBitmapContext;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })unscaledClipRect;
- (float)viewScale;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })visibleScaledBoundsForClippingRepsOnCanvas:(id)arg1;

@end
