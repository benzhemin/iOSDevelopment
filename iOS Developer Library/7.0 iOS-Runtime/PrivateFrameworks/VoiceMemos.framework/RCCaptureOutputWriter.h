/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VoiceMemos.framework/VoiceMemos
 */

@class <RCCaptureOutputWriterDelegate>, AVAssetWriter, AVCaptureAudioDataOutput, AVCaptureSession, NSDate, NSMutableArray, NSObject<OS_dispatch_queue>, NSString, NSURL, NSUUID;

@interface RCCaptureOutputWriter : NSObject <AVCaptureAudioDataOutputSampleBufferDelegate> {
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    AVCaptureSession *_AVCaptureSession;
    int _AVCaptureSessionStartupState;
    NSURL *_activeOutputFileURL;
    AVAssetWriter *_assetWriter;
    <RCCaptureOutputWriterDelegate> *_captureOutputDelegate;
    NSMutableArray *_delegateBlocks;
    double _finalizedAssetDuration;
    BOOL _finalizedAssetEncounteredError;
    NSURL *_finalizedAssetURL;
    BOOL _handledAVCaptureSessionFailedToStart;
    BOOL _handledAVCaptureSessionTerminatedAbnormally;
    BOOL _isProcessingSamples;
    double _maxRecordedDuration;
    unsigned long long _maxRecordedFileSize;
    NSObject<OS_dispatch_queue> *_queue;
    NSDate *_recordingCreationDate;
    NSUUID *_recordingSessionID;
    AVCaptureAudioDataOutput *_sampleBufferDataOutput;
    NSObject<OS_dispatch_queue> *_sampleBufferQueue;
    unsigned int _sampleBuffersWritten;
    } _sampleBuffersWrittenDuration;
    BOOL _waitingForAVCaptureSessionDidStart;
    int _writerState;
}

@property(readonly) AVCaptureSession * AVCaptureSession;
@property(retain) NSURL * activeOutputFileURL;
@property(retain) AVAssetWriter * assetWriter;
@property(readonly) double assetWritingCheckpointInterval;
@property <RCCaptureOutputWriterDelegate> * captureOutputDelegate;
@property(copy,readonly) NSString * debugDescription;
@property(copy,readonly) NSString * description;
@property(readonly) double finalizedAssetDuration;
@property(readonly) BOOL finalizedAssetEncounteredError;
@property(readonly) NSURL * finalizedAssetURL;
@property(readonly) unsigned int hash;
@property double maxRecordedDuration;
@property unsigned long long maxRecordedFileSize;
@property(retain) NSObject<OS_dispatch_queue> * queue;
@property(retain) NSDate * recordingCreationDate;
@property(copy) NSUUID * recordingSessionID;
@property(retain) AVCaptureAudioDataOutput * sampleBufferDataOutput;
@property(retain) NSObject<OS_dispatch_queue> * sampleBufferQueue;
@property(readonly) Class superclass;
@property int writerState;

- (void).cxx_destruct;
- (id)AVCaptureSession;
- (void)_checkIfRecordingSessionEverStarted:(id)arg1;
- (void)_clearSampleDataOutput;
- (void)_finalizeAssetWriting;
- (BOOL)_handleEncounteredFatalAssetWriterError;
- (BOOL)_handleNotificationAsSessionStartFailure;
- (void)_interruptionDidBegin:(id)arg1;
- (void)_prepareCaptureSessionOutputsIfNecessary;
- (void)_registerForCatpureSessionNotifications;
- (void)_scheduleMainThreadDelegateBlock:(id)arg1;
- (void)_sessionDidStartRunning:(id)arg1;
- (void)_sessionDidStopRunning:(id)arg1;
- (void)_sessionErrored:(id)arg1;
- (void)_setWriterState:(int)arg1;
- (BOOL)_setupAssetWriter:(id*)arg1 sampleBufferRef:(struct opaqueCMSampleBuffer { }*)arg2;
- (void)_unregisterForCatpureSessionNotifications;
- (int)_writerState;
- (id)activeOutputFileURL;
- (id)assetWriter;
- (double)assetWritingCheckpointInterval;
- (void)captureOutput:(id)arg1 didOutputSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2 fromConnection:(id)arg3;
- (id)captureOutputDelegate;
- (void)dealloc;
- (void)endWriting;
- (double)finalizedAssetDuration;
- (BOOL)finalizedAssetEncounteredError;
- (id)finalizedAssetURL;
- (id)initWithAVCaptureSession:(id)arg1;
- (double)maxRecordedDuration;
- (unsigned long long)maxRecordedFileSize;
- (void)pauseWriting;
- (id)queue;
- (id)recordingCreationDate;
- (id)recordingSessionID;
- (void)resumeWriting;
- (id)sampleBufferDataOutput;
- (id)sampleBufferQueue;
- (void)setActiveOutputFileURL:(id)arg1;
- (void)setAssetWriter:(id)arg1;
- (void)setCaptureOutputDelegate:(id)arg1;
- (void)setMaxRecordedDuration:(double)arg1;
- (void)setMaxRecordedFileSize:(unsigned long long)arg1;
- (void)setQueue:(id)arg1;
- (void)setRecordingCreationDate:(id)arg1;
- (void)setRecordingSessionID:(id)arg1;
- (void)setSampleBufferDataOutput:(id)arg1;
- (void)setSampleBufferQueue:(id)arg1;
- (void)setWriterState:(int)arg1;
- (BOOL)startCaptureSession;
- (BOOL)startWritingToOutputFileURL:(id)arg1 creationDate:(id)arg2 beginPaused:(BOOL)arg3 captureOutputDelegate:(id)arg4;
- (void)stopCaptureSession;
- (int)writerState;

@end
