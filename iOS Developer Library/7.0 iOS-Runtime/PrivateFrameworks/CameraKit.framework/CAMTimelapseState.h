/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CameraKit.framework/CameraKit
 */

@class CLLocation, NSDate, NSString;

@interface CAMTimelapseState : NSObject <NSCoding, NSCopying> {
    BOOL _allFramesWritten;
    int _captureOrientation;
    double _captureTimeInterval;
    float _focusLensPosition;
    int _frameIndexStride;
    NSDate *_lastFrameResponseTime;
    int _nextFrameIndex;
    CLLocation *_startLocation;
    NSDate *_startTime;
    int _stopReasons;
    NSDate *_stopTime;
    NSString *_timelapseUUID;
    BOOL _usingFrontCamera;
}

@property BOOL allFramesWritten;
@property int captureOrientation;
@property(readonly) double captureTimeInterval;
@property(readonly) int connectionMode;
@property float focusLensPosition;
@property(readonly) int frameIndexStride;
@property(retain) NSDate * lastFrameResponseTime;
@property(readonly) int nextFrameIndex;
@property(retain) CLLocation * startLocation;
@property(retain) NSDate * startTime;
@property int stopReasons;
@property(retain) NSDate * stopTime;
@property(retain) NSString * timelapseUUID;
@property(getter=isUsingFrontCamera) BOOL usingFrontCamera;

+ (double)maxTimeToWaitForWrittenFrameAfterStop;
+ (id)stateWithContentsOfFile:(id)arg1;

- (void).cxx_destruct;
- (BOOL)addStopReasons:(int)arg1 stopTime:(id)arg2;
- (BOOL)allFramesWritten;
- (BOOL)canContinueCapture;
- (int)captureOrientation;
- (double)captureTimeInterval;
- (int)connectionMode;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)filePathForNextFrameIndex;
- (float)focusLensPosition;
- (void)forceCompleted;
- (int)frameIndexStride;
- (BOOL)incrementFrameIndex;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isEqualToState:(id)arg1;
- (BOOL)isReadyForWritingMovie;
- (BOOL)isUsingFrontCamera;
- (id)lastFrameResponseTime;
- (BOOL)mergeSecondaryState:(id)arg1;
- (int)nextFrameIndex;
- (void)setAllFramesWritten:(BOOL)arg1;
- (void)setCaptureOrientation:(int)arg1;
- (void)setFocusLensPosition:(float)arg1;
- (void)setLastFrameResponseTime:(id)arg1;
- (void)setStartLocation:(id)arg1;
- (void)setStartTime:(id)arg1;
- (void)setStopReasons:(int)arg1;
- (void)setStopTime:(id)arg1;
- (void)setTimelapseUUID:(id)arg1;
- (void)setUsingFrontCamera:(BOOL)arg1;
- (id)startLocation;
- (id)startTime;
- (int)stopReasons;
- (id)stopTime;
- (id)timelapseUUID;
- (BOOL)writeToFile:(id)arg1 createDirectoryIfNeeded:(BOOL)arg2;

@end
