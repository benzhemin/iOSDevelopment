/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 */

@class NSArray, NSData, NSDate, NSMutableArray, NSMutableSet, NSSet, NSString, NSURL, WBSHistoryItem, WBSHistoryVisit;

@interface WBSHistoryItem : NSObject {
    struct Vector<int, 0, WTF::CrashOnOverflow> { 
        int *m_buffer; 
        unsigned int m_capacity; 
        unsigned int m_size; 
    struct Vector<int, 0, WTF::CrashOnOverflow> { 
        int *m_buffer; 
        unsigned int m_capacity; 
        unsigned int m_size; 
    NSMutableArray *_autocompleteTriggers;
    float _cachedTopSitesURLPenalty;
    float _cachedTopSitesVisitScore;
    } _dailyVisitCounts;
    int _databaseID;
    double _lastTimeTopSitesScoreWasComputed;
    WBSHistoryVisit *_lastVisit;
    NSMutableArray *_redirectSourceItems;
    BOOL _shouldRecomputeDerivedVisitCounts;
    NSURL *_url;
    NSString *_urlString;
    NSString *_userVisibleURLString;
    unsigned int _visitCount;
    NSMutableArray *_visits;
    NSMutableSet *_visitsPendingWriteToDataStore;
    } _weeklyVisitCounts;
}

@property(readonly) NSArray * autocompleteTriggers;
@property(readonly) NSData * autocompleteTriggersDataOnSynchronizationQueue;
@property float cachedTopSitesURLPenalty;
@property float cachedTopSitesVisitScore;
@property(readonly) unsigned int dailyVisitCountsCountOnSynchronizationQueue;
@property(readonly) NSData * dailyVisitCountsDataOnSynchronizationQueue;
@property(readonly) const int* dailyVisitCountsPtrOnSynchronizationQueue;
@property int databaseID;
@property(readonly) WBSHistoryItem * endOfLastVisitRedirectChain;
@property double lastTimeTopSitesScoreWasComputed;
@property(readonly) WBSHistoryVisit * lastVisit;
@property(readonly) WBSHistoryVisit * lastVisitOnSynchronizationQueue;
@property(readonly) WBSHistoryItem * lastVisitRedirectDestinationItem;
@property BOOL lastVisitWasFailure;
@property(readonly) BOOL lastVisitWasHTTPNonGet;
@property(readonly) NSDate * lastVisitedDate;
@property(readonly) double lastVisitedTimeInterval;
@property(readonly) NSArray * redirectSourceItems;
@property(readonly) BOOL shouldRecomputeDerivedVisitCounts;
@property(readonly) NSString * simplifiedUserVisibleURLString;
@property(readonly) NSString * stringForUserTypedDomainExpansion;
@property(readonly) NSString * stringForUserTypedDomainExpansionOnSynchronizationQueue;
@property(copy) NSString * title;
@property(readonly) NSURL * url;
@property(readonly) NSString * urlString;
@property(readonly) NSString * urlStringOnSynchronizationQueue;
@property(readonly) NSString * userVisibleURLString;
@property(readonly) unsigned int visitCount;
@property(readonly) NSArray * visits;
@property(readonly) NSSet * visitsPendingWriteToDataStoreOnSynchronizationQueue;
@property(readonly) unsigned int weeklyVisitCountsCountOnSynchronizationQueue;
@property(readonly) NSData * weeklyVisitCountsDataOnSynchronizationQueue;
@property(readonly) const int* weeklyVisitCountsPtrOnSynchronizationQueue;

+ (void)initialize;
+ (id)synchronizationQueue;
+ (double)timeIntervalForDailyAndWeeklyVisitCounts;

- (id).cxx_construct;
- (void).cxx_destruct;
- (BOOL)_addAutocompleteTriggerFromSynchronizationQueue:(id)arg1;
- (void)_addExistingVisit:(id)arg1;
- (void)_addVisit:(id)arg1;
- (id)_autocompleteTriggersFromSynchronizationQueue;
- (void)_collapseDailyVisitsToWeekly;
- (void)_padDailyCountsForNewVisitAtTime:(double)arg1;
- (struct Vector<double, 0, WTF::CrashOnOverflow> { double *x1; unsigned int x2; unsigned int x3; })_timesForSynthesizedVisitsPreceedingDailyAndWeeklyRange:(unsigned int)arg1;
- (struct Vector<double, 0, WTF::CrashOnOverflow> { double *x1; unsigned int x2; unsigned int x3; })_timesForVisits:(unsigned int)arg1 toSynthesizeBetweenStartTime:(double)arg2 endTime:(double)arg3;
- (struct Vector<double, 0, WTF::CrashOnOverflow> { double *x1; unsigned int x2; unsigned int x3; })_timesOfVisitsToSynthesizeFromDailyAndWeeklyCounts;
- (id)_urlOnSynchronizationQueue;
- (void)_wasVisitedOnSynchronizationQueue:(id)arg1;
- (BOOL)addAutocompleteTrigger:(id)arg1;
- (void)addRedirectSourceItemFromSynchronizationQueue:(id)arg1;
- (id)autocompleteTriggers;
- (id)autocompleteTriggersDataOnSynchronizationQueue;
- (float)cachedTopSitesURLPenalty;
- (float)cachedTopSitesVisitScore;
- (void)clearVisitsPendingWriteToDataStoreFromSynchronizationQueue;
- (int)compareWithItemByLastVisitedTimeInterval:(id)arg1;
- (unsigned int)dailyVisitCountsCountOnSynchronizationQueue;
- (id)dailyVisitCountsDataOnSynchronizationQueue;
- (const int*)dailyVisitCountsPtrOnSynchronizationQueue;
- (int)databaseID;
- (id)endOfLastVisitRedirectChain;
- (id)initWithDictionaryRepresentation:(id)arg1;
- (id)initWithSQLiteRow:(id)arg1;
- (id)initWithURLString:(id)arg1;
- (double)lastTimeTopSitesScoreWasComputed;
- (id)lastVisit;
- (id)lastVisitOnSynchronizationQueue;
- (id)lastVisitRedirectDestinationItem;
- (BOOL)lastVisitWasFailure;
- (BOOL)lastVisitWasHTTPNonGet;
- (id)lastVisitedDate;
- (double)lastVisitedTimeInterval;
- (void)mergeDataFromItem:(id)arg1;
- (void)recomputeDerivedVisitCountsWithVisitTimes:(id)arg1;
- (void)recordExistingRedirectFrom:(id)arg1 to:(id)arg2;
- (void)recordSynthesizedRedirectFrom:(id)arg1 to:(id)arg2;
- (id)redirectSourceItems;
- (void)removeVisits:(id)arg1 candidateLastVisit:(id)arg2;
- (void)removeVisitsOnSynchronizationQueue:(id)arg1 candidateLastVisit:(id)arg2;
- (void)setCachedTopSitesURLPenalty:(float)arg1;
- (void)setCachedTopSitesVisitScore:(float)arg1;
- (void)setDatabaseID:(int)arg1;
- (void)setLastTimeTopSitesScoreWasComputed:(double)arg1;
- (void)setLastVisitWasFailure:(BOOL)arg1;
- (void)setTitle:(id)arg1;
- (BOOL)shouldRecomputeDerivedVisitCounts;
- (id)simplifiedUserVisibleURLString;
- (id)stringForUserTypedDomainExpansion;
- (id)stringForUserTypedDomainExpansionOnSynchronizationQueue;
- (id)title;
- (id)url;
- (id)urlString;
- (id)urlStringOnSynchronizationQueue;
- (id)userVisibleURLString;
- (unsigned int)visitCount;
- (id)visits;
- (id)visitsPendingWriteToDataStoreOnSynchronizationQueue;
- (void)wasRedirectedFrom:(id)arg1 to:(id)arg2;
- (void)wasVisited:(id)arg1;
- (unsigned int)weeklyVisitCountsCountOnSynchronizationQueue;
- (id)weeklyVisitCountsDataOnSynchronizationQueue;
- (const int*)weeklyVisitCountsPtrOnSynchronizationQueue;

@end
