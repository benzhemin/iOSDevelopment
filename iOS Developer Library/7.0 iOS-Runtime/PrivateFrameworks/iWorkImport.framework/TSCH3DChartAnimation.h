/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class NSMutableArray, NSMutableDictionary, TSCH3DAnimationInterpolation, TSCH3DAnimationTimeSlice, TSCH3DAnimationTiming, TSCH3DAnimationTimings, TSCH3DAnimationValueTiming, TSCH3DChartElementAnimationTimeSlice, TSCH3DChartRep, TSCH3DOrderedDictionary, TSCH3DScene;

@interface TSCH3DChartAnimation : NSObject <TSCH3DSceneObjectDelegator, TSCH3DSceneDelegate, TSCHUnretainedParent> {
    struct ChartAnimationTimeRanges { 
        struct box<glm::detail::tvec1<float> > { 
            struct tvec1<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
            } mMin; 
            struct tvec1<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
            } mMax; 
        } elementsRange; 
        struct box<glm::detail::tvec1<float> > { 
            struct tvec1<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
            } mMin; 
            struct tvec1<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
            } mMax; 
        } valueLabelsRange; 
        struct box<glm::detail::tvec1<float> > { 
            struct tvec1<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
            } mMin; 
            struct tvec1<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
            } mMax; 
        } gridlinesRange; 
        struct box<glm::detail::tvec1<float> > { 
            struct tvec1<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
            } mMin; 
            struct tvec1<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
            } mMax; 
        } labelsRange; 
        struct box<glm::detail::tvec1<float> > { 
            struct tvec1<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
            } mMin; 
            struct tvec1<float> { 
                union { 
                    float x; 
                    float r; 
                    float s; 
                } ; 
            } mMax; 
        } shadowBlendRange; 
        BOOL gridlinesEaseInEaseOut; 
        struct ObjcSharedPtr<TSCH3DAnimationInterpolation> { 
            TSCH3DAnimationInterpolation *mValue; 
        } growPerElementInterpolation; 
        BOOL blendDynamicShadows; 
        struct ObjcSharedPtr<TSCH3DAnimationInterpolation> { 
            TSCH3DAnimationInterpolation *mValue; 
        } labelsInterpolation; 
        struct ObjcSharedPtr<TSCH3DAnimationInterpolation> { 
            TSCH3DAnimationInterpolation *mValue; 
        } valueLabelsInterpolation; 
    TSCH3DAnimationTimings *mBackgroundPlaneTimings;
    TSCH3DAnimationTimings *mElementPlaneTimings;
    TSCH3DAnimationTimings *mElementTimings;
    TSCH3DAnimationTimings *mGlobalTimings;
    TSCH3DScene *mLayoutScene;
    TSCH3DChartRep *mRep;
    TSCH3DScene *mScene;
    NSMutableArray *mSceneAnimationClips;
    NSMutableArray *mSceneObjectDelegates;
    TSCH3DOrderedDictionary *mSeparateLayers;
    TSCH3DAnimationValueTiming *mShaderEffectElementsTiming;
    } mTimeRanges;
    TSCH3DChartElementAnimationTimeSlice *mTimeSlice;
    NSMutableDictionary *mTimingContext;
}

@property(readonly) TSCH3DAnimationTiming * elementTimings;
@property(readonly) TSCH3DScene * layoutScene;
@property(readonly) TSCH3DScene * scene;
@property(retain) TSCH3DOrderedDictionary * separateLayers;
@property(readonly) TSCH3DAnimationTimeSlice * timeSlice;

+ (double)animationFPS;
+ (id)animationFilter;
+ (id)animationInfoForBuildType:(int)arg1;
+ (id)animationWithRep:(id)arg1;
+ (int)chartAnimationType;
+ (BOOL)dynamicShadowsEnabled;
+ (void)updateLayoutScene:(id)arg1;
+ (void)updateRenderScene:(id)arg1;
+ (void)updateScene:(id)arg1;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)addAllLabelsAnimationToClips:(id)arg1 sceneObject:(id)arg2;
- (void)addAnimationToClips:(id)arg1 forScene:(id)arg2;
- (void)addAnimationToClips:(id)arg1 forSceneObject:(id)arg2 scene:(id)arg3;
- (void)addStaticBackgroundBlendClipsToClips:(id)arg1 scene:(id)arg2;
- (void)addTitleAnimationToClips:(id)arg1 sceneObject:(id)arg2;
- (void)addToBackgroundBlendAnimClips:(id)arg1 scene:(id)arg2;
- (void)addToBackgroundBlendAnimClips:(id)arg1 sceneObject:(id)arg2;
- (void)addToBackgroundBlendTimings:(id)arg1;
- (void)addToBackgroundPlaneTimings:(id)arg1;
- (void)addToChartElementBlendAnimClips:(id)arg1 sceneObject:(id)arg2 shouldUpdateDelayOpaqueFlag:(BOOL)arg3 shouldUpdateBlendOpaqueFlag:(BOOL)arg4 shouldUpdateAlwaysRenderFlag:(BOOL)arg5 needPerElementBlending:(BOOL)arg6;
- (void)addToChartElementBlendTimings:(id)arg1 range:(const struct box<glm::detail::tvec1<float> > { struct tvec1<float> { union { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_1_1_1; } x1; struct tvec1<float> { union { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_2_1_1; } x2; }*)arg2 interpolation:(id)arg3;
- (void)addToChartRotationAnimationElementBlendAnimClips:(id)arg1 sceneObject:(id)arg2 shouldUpdateAlwaysRenderFlag:(BOOL)arg3;
- (void)addToCraneElementBlendTimings:(id)arg1;
- (void)addToElementPlaneTimings:(id)arg1;
- (void)addToElementTimings:(id)arg1;
- (void)addToGrowAnimClips:(id)arg1 sceneObject:(id)arg2;
- (void)addToGrowElementBlendTimings:(id)arg1;
- (void)addToGrowElementTimings:(id)arg1 range:(const struct box<glm::detail::tvec1<float> > { struct tvec1<float> { union { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_1_1_1; } x1; struct tvec1<float> { union { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_2_1_1; } x2; }*)arg2;
- (void)addToGrowElementTimings:(id)arg1 reserveForLabels:(BOOL)arg2;
- (void)addToGrowElementTimings:(id)arg1;
- (void)addToRadialElementBlendTimings:(id)arg1;
- (void)addToRotateAnimClips:(id)arg1 scene:(id)arg2 secondaryAngle:(float)arg3;
- (void)addToRotateTimings:(id)arg1;
- (void)addToRotatingGrowElementTimings:(id)arg1;
- (void)addToRotationBasedElementBlendTimings:(id)arg1;
- (void)addToShadowBlendAnimClips:(id)arg1 sceneObject:(id)arg2;
- (void)addToShadowBlendAnimClips:(id)arg1;
- (void)addToShadowBlendTimings:(id)arg1;
- (void)addToValueLabelsAnimClips:(id)arg1 sceneObject:(id)arg2;
- (void)addToValueLabelsTimings:(id)arg1 range:(const struct box<glm::detail::tvec1<float> > { struct tvec1<float> { union { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_1_1_1; } x1; struct tvec1<float> { union { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_2_1_1; } x2; }*)arg2;
- (void)addToValueLabelsTimings:(id)arg1;
- (void)addToZAxisElementBlendTimings:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })adjustBodyCanvasBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 againstBodyCanvasDrawableFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (void)clearParent;
- (void)dealloc;
- (id)description;
- (void)didRunForScene:(id)arg1 pipeline:(id)arg2;
- (id)elementTimings;
- (id)globalTimingInterpolation;
- (id)gridlineLabelsSelectionBlock;
- (id)growGlobalTimingInterpolation;
- (BOOL)individualValueLabels;
- (id)initWithRep:(id)arg1;
- (BOOL)isPie;
- (id)layoutScene;
- (id)makeDelegateWithScene:(id)arg1;
- (id)makeDelegateWithSceneObject:(id)arg1 scene:(id)arg2;
- (BOOL)needDynamicShadows;
- (void)p_addPlaneTimings:(id)arg1;
- (BOOL)p_anySeriesHasLabelsEnabled;
- (BOOL)p_chunkingStyleHasAxes;
- (void)p_didUpdateAnimationTime;
- (BOOL)p_growAnimationLinearInterpolation;
- (BOOL)p_growClipRequiresShaderBasedInterpolation;
- (BOOL)p_isBar;
- (BOOL)p_isStackedBar;
- (BOOL)p_sequenceInOrder;
- (struct box<glm::detail::tvec1<float> > { struct tvec1<float> { union { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_1_1_1; } x1; struct tvec1<float> { union { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_2_1_1; } x2; })p_timeRangeForGrowElements;
- (void)p_updateAllRotatingGrowTimeRanges;
- (void)p_updateAxesOnlyRotatingGrowTimeRanges;
- (void)p_updateGrowTimeRangesWithAxesRange:(const struct box<glm::detail::tvec1<float> > { struct tvec1<float> { union { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_1_1_1; } x1; struct tvec1<float> { union { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_2_1_1; } x2; }*)arg1 waitTimeAfterAxes:(float)arg2;
- (void)p_updateNoAxesRotatingGrowTimeRanges;
- (void)p_updateRotatingGrowLabelsRange;
- (BOOL)p_usesRotatingGrowEaseOut;
- (struct box<glm::detail::tvec1<float> > { struct tvec1<float> { union { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_1_1_1; } x1; struct tvec1<float> { union { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_2_1_1; } x2; })pieDelayedLabelsRange;
- (id)scene;
- (id)separateLayerSceneObjectsSelectionBlocks;
- (id)separateLayers;
- (void)setSeparateLayers:(id)arg1;
- (id)shadowsSelectionBlock;
- (id)timeSlice;
- (void)update:(float)arg1;
- (void)updateGrowTimeRanges;
- (void)updateRadialTimeRanges;
- (void)updateRotatingGrowTimeRanges;
- (void)updateTimeRanges;
- (void)updateTimings;
- (void)willRunForScene:(id)arg1 pipeline:(id)arg2;

@end
