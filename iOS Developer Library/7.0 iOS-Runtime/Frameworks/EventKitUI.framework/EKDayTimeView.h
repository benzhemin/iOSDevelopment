/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/EventKitUI.framework/EventKitUI
 */

@class <EKDayTimeViewDelegate>, EKCurrentTimeMarkerView, NSMutableArray, NSString, UIColor, UIView;

@interface EKDayTimeView : UIView <EKCurrentTimeMarkerViewUpdating> {
    struct _NSRange { 
        unsigned int location; 
        unsigned int length; 
    unsigned int _leftBorder : 1;
    unsigned int _rightBorder : 1;
    NSMutableArray *_contentViews;
    <EKDayTimeViewDelegate> *_delegate;
    float _designatorSize;
    double _highlightedHour;
    float _hourHeight;
    float _hourHeightScale;
    float _hourSize;
    float _hoursToPad;
    } _hoursToRender;
    int _orientation;
    BOOL _showsTimeMarker;
    BOOL _showsTimeMarkerExtension;
    UIColor *_timeColor;
    EKCurrentTimeMarkerView *_timeMarker;
    UIView *_timeMarkerExtension;
    float _timeWidth;
    BOOL _usesLightText;
}

@property(copy,readonly) NSString * debugDescription;
@property(readonly) float defaultHeight;
@property <EKDayTimeViewDelegate> * delegate;
@property(copy,readonly) NSString * description;
@property(readonly) unsigned int hash;
@property double highlightedHour;
@property(readonly) float hourHeight;
@property float hourHeightScale;
@property float hoursToPad;
@property struct _NSRange { unsigned int x1; unsigned int x2; } hoursToRender;
@property BOOL showsLeftBorder;
@property BOOL showsRightBorder;
@property BOOL showsTimeMarker;
@property BOOL showsTimeMarkerExtension;
@property(readonly) Class superclass;
@property(retain) UIColor * timeColor;
@property(readonly) EKCurrentTimeMarkerView * timeMarker;
@property BOOL usesLightText;

+ (id)_boldFontForOrientation:(int)arg1;
+ (void)_calculateWidthForOrientation:(int)arg1;
+ (float)_dynamicFontSizeForOrientation:(int)arg1;
+ (float)_hourWidthForOrientation:(int)arg1;
+ (void)_invalidateCachedValues;
+ (void)_invalidateWidth;
+ (id)_normalFontForOrientation:(int)arg1;
+ (void)_registerForInvalidation;
+ (id)allDayLabelBoldFont;
+ (id)allDayLabelFont;
+ (float)defaultHeightForOrientation:(int)arg1 withHourScale:(float)arg2;
+ (float)defaultHeightForOrientation:(int)arg1;
+ (float)defaultHourScale;
+ (float)designatorSizeForOrientation:(int)arg1;
+ (float)hourHeightForOrientation:(int)arg1;
+ (float)hourSizeForOrientation:(int)arg1;
+ (void)setVerticalPadding:(float)arg1;
+ (float)timeInsetForOrientation:(int)arg1;
+ (float)timeVerticalInsetForOrientation:(int)arg1;
+ (float)timeWidthForOrientation:(int)arg1;
+ (id)unscaledAllDayLabelFont;
+ (float)verticalPadding;

- (void).cxx_destruct;
- (void)_fontSizeChanged;
- (void)_invalidateTimeWidth;
- (void)_localeChanged;
- (float)_positionOfSecond:(int)arg1;
- (float)_timeWidth;
- (void)dealloc;
- (float)defaultHeight;
- (id)delegate;
- (void)drawRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 forContentView:(id)arg2 withHourRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg3;
- (double)highlightedHour;
- (float)hourHeight;
- (float)hourHeightScale;
- (float)hoursToPad;
- (struct _NSRange { unsigned int x1; unsigned int x2; })hoursToRender;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)layoutFrames;
- (void)layoutSubviews;
- (float)scaledHourHeight;
- (void)setDelegate:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setHighlightedHour:(double)arg1;
- (void)setHourHeightScale:(float)arg1;
- (void)setHoursToPad:(float)arg1;
- (void)setHoursToRender:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (void)setNeedsDisplay;
- (void)setOpaque:(BOOL)arg1;
- (void)setOrientation:(int)arg1;
- (void)setShowsLeftBorder:(BOOL)arg1;
- (void)setShowsRightBorder:(BOOL)arg1;
- (void)setShowsTimeMarker:(BOOL)arg1;
- (void)setShowsTimeMarkerExtension:(BOOL)arg1;
- (void)setTimeColor:(id)arg1;
- (void)setUsesLightText:(BOOL)arg1;
- (BOOL)showsLeftBorder;
- (BOOL)showsRightBorder;
- (BOOL)showsTimeMarker;
- (BOOL)showsTimeMarkerExtension;
- (struct CGSize { float x1; float x2; })sizeThatFits:(struct CGSize { float x1; float x2; })arg1;
- (id)timeColor;
- (id)timeMarker;
- (void)tintColorDidChange;
- (float)topPadding;
- (void)updateMarkerPosition;
- (BOOL)usesLightText;

@end
