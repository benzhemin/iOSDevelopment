/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSString, VKLabelNavJunction, VKLabelNavRoadLabel, VKLabelTile;

@interface VKLabelNavRoad : NSObject <VKLabelNavFeature> {
    struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > > { 
        struct Matrix<double, 2, 1> {} *__begin_; 
        struct Matrix<double, 2, 1> {} *__end_; 
        struct __compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > > { 
            struct Matrix<double, 2, 1> {} *__first_; 
        } __end_cap_; 
    struct Matrix<float, 2, 1> { 
        float _e[2]; 
    struct PolylineCoordinate { 
        unsigned int index; 
        float offset; 
    BOOL _areLabelsDisabled;
    BOOL _areNavStylesInitialized;
    struct { struct { id x_1_1_1; char *x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; unsigned int x_1_1_5; unsigned int x_1_1_6; unsigned int x_1_1_7; unsigned long long x_1_1_8; BOOL x_1_1_9; unsigned long long x_1_1_10; float x_1_1_11; unsigned long long x_1_1_12; id x_1_1_13; int x_1_1_14; } x1; unsigned int x2; unsigned int x3; int x4; int x5; int x6; unsigned int x7; unsigned int x8; union { struct { struct { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_9_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; } x_9_1_2; } x9; struct { /* ? */ } *x10; struct { unsigned short x_11_1_1[2]; unsigned short x_11_1_2[2]; } x11; unsigned char x12; } *_data;
    } _direction;
    BOOL _hasVisibleShields;
    BOOL _hasVisibleSigns;
    int _intraRoadPriority;
    BOOL _isGuidanceStepStart;
    BOOL _isInGuidance;
    BOOL _isOnRoute;
    BOOL _isRoadLabelUnique;
    BOOL _isStartOfRoadName;
    struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; struct { /* ? */ } *x5; } *_junctionA;
    struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; struct { /* ? */ } *x5; } *_junctionB;
    double _length;
    NSString *_name;
    VKLabelNavJunction *_navJunctionA;
    VKLabelNavRoadLabel *_roadShield;
    VKLabelNavRoadLabel *_roadSign;
    float _routeCrossProduct;
    } _routeOffset;
    NSString *_shieldDisplayGroup;
    NSString *_shieldGroup;
    } _simplifiedPoints;
    BOOL _suppressRoadSignIfShieldPresent;
    VKLabelTile *_tile;
    unsigned int _vertexIndexA;
    unsigned int _vertexIndexB;
}

@property /* Warning: unhandled struct encoding: '{Matrix<float' */ struct  direction; /* unknown property attribute:  1>=[2f]} */
@property BOOL areLabelsDisabled;
@property(readonly) const char * cstrName;
@property int intraRoadPriority;
@property(readonly) BOOL isAwayFromRoute;
@property BOOL isGuidanceStepStart;
@property BOOL isInGuidance;
@property BOOL isOnRoute;
@property(readonly) BOOL isOnewayToJunction;
@property(readonly) BOOL isRamp;
@property BOOL isRoadLabelUnique;
@property BOOL isStartOfRoadName;
@property(readonly) struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; struct { /* ? */ } *x5; }* junctionB;
@property(readonly) NSString * name;
@property(readonly) VKLabelNavJunction * navJunctionA;
@property(readonly) int roadClass;
@property(readonly) int roadSignAlignment;
@property float routeCrossProduct;
@property struct PolylineCoordinate { unsigned int x1; float x2; } routeOffset;
@property(readonly) NSString * shieldDisplayGroup;
@property(readonly) NSString * shieldGroup;
@property(readonly) BOOL suppressRoadSignIfShieldPresent;
@property(readonly) VKLabelTile * tile;

- (id).cxx_construct;
- (void).cxx_destruct;
- (BOOL)_findLabelAnchorPoint:(struct VKPoint { double x1; double x2; double x3; }*)arg1 isShieldLabel:(BOOL)arg2 desiredOffsetDistance:(float)arg3 maxOffsetDistance:(float)arg4 minJunctionDistance:(float)arg5 roadGraph:(id)arg6;
- (float)_findRoadOffsetForDistanceToRay:(float)arg1 rayStart:(struct VKPoint { double x1; double x2; double x3; })arg2 rayVector:(struct Matrix<float, 2, 1> { float x1[2]; })arg3 roadGraph:(id)arg4;
- (id)_newLabelWithNavContext:(struct NavContext { int (**x1)(); struct LabelManager {} *x2; }*)arg1 isShieldLabel:(BOOL)arg2 worldPoint:(struct VKPoint { double x1; double x2; double x3; })arg3 alignment:(int)arg4;
- (BOOL)_worldPointForRoadOffset:(float)arg1 worldPoint:(struct VKPoint { double x1; double x2; double x3; }*)arg2;
- (void)_worldRoadPoints:(struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > > { struct Matrix<double, 2, 1> {} *x1; struct Matrix<double, 2, 1> {} *x2; struct __compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > > { struct Matrix<double, 2, 1> {} *x_3_1_1; } x3; }*)arg1;
- (void)appendSimplifiedWorldRoadPoints:(struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > > { struct Matrix<double, 2, 1> {} *x1; struct Matrix<double, 2, 1> {} *x2; struct __compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > > { struct Matrix<double, 2, 1> {} *x_3_1_1; } x3; }*)arg1;
- (BOOL)areLabelsDisabled;
- (void)clearRoadSign;
- (void)createLabelWithNavContext:(struct NavContext { int (**x1)(); struct LabelManager {} *x2; }*)arg1 isShieldLabel:(BOOL)arg2 desiredOffsetDistance:(float)arg3 maxOffsetDistance:(float)arg4 minJunctionDistance:(float)arg5 minRouteDistance:(float)arg6 roadGraph:(id)arg7;
- (const char *)cstrName;
- (void)dealloc;
- (id)description;
- (struct Matrix<float, 2, 1> { float x1[2]; })direction;
- (void)getRoadEdge:(struct { struct { /* ? */ } *x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; struct { /* ? */ } *x6; struct { /* ? */ } *x7; }*)arg1;
- (BOOL)hasShield;
- (BOOL)hasVisibleShields;
- (BOOL)hasVisibleSigns;
- (id)initWithRoadEdge:(const struct { struct { /* ? */ } *x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; struct { /* ? */ } *x6; struct { /* ? */ } *x7; }*)arg1 navJunctionA:(id)arg2 routeOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg3 tile:(id)arg4;
- (int)intraRoadPriority;
- (BOOL)isAwayFromRoute;
- (BOOL)isGuidanceStepStart;
- (BOOL)isInGuidance;
- (BOOL)isOnRoute;
- (BOOL)isOnewayToJunction;
- (BOOL)isRamp;
- (BOOL)isRoadLabelUnique;
- (BOOL)isStartOfRoadName;
- (struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; struct { /* ? */ } *x5; }*)junctionB;
- (id)labelWithType:(BOOL)arg1;
- (double)length;
- (BOOL)matchesRoad:(id)arg1;
- (BOOL)matchesRoadEdge:(const struct { struct { /* ? */ } *x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; struct { /* ? */ } *x6; struct { /* ? */ } *x7; }*)arg1;
- (id)name;
- (id)navJunctionA;
- (void)prepareStyleVarsWithContext:(struct NavContext { int (**x1)(); struct LabelManager {} *x2; }*)arg1;
- (void)recreateRoadSignWithAlignment:(int)arg1 navContext:(struct NavContext { int (**x1)(); struct LabelManager {} *x2; }*)arg2;
- (int)roadClass;
- (int)roadSignAlignment;
- (float)routeCrossProduct;
- (struct PolylineCoordinate { unsigned int x1; float x2; })routeOffset;
- (void)setAreLabelsDisabled:(BOOL)arg1;
- (void)setDirection:(struct Matrix<float, 2, 1> { float x1[2]; })arg1;
- (void)setIntraRoadPriority:(int)arg1;
- (void)setIsGuidanceStepStart:(BOOL)arg1;
- (void)setIsInGuidance:(BOOL)arg1;
- (void)setIsOnRoute:(BOOL)arg1;
- (void)setIsRoadLabelUnique:(BOOL)arg1;
- (void)setIsStartOfRoadName:(BOOL)arg1;
- (void)setRouteCrossProduct:(float)arg1;
- (void)setRouteOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1;
- (id)shieldDisplayGroup;
- (id)shieldGroup;
- (BOOL)suppressRoadSignIfShieldPresent;
- (id)tile;

@end
