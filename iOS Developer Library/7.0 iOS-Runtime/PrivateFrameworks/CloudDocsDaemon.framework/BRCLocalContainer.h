/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/CloudDocsDaemon
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class <BRCLocalContainerDelegate>, BRCAccountSession, BRCDBThrottle, BRCRelativePath, BRCServerContainer, BRCSyncBudgetThrottle, BRCSyncDownOperation, BRCSyncOperationThrottle, BRCSyncUpOperation, BRCThrottle, BRCVersionDownloader, BRCVersionUploader, BRContainer, CDAttribute, CDBudget, NSArray, NSDate, NSDictionary, NSError, NSMutableIndexSet, NSMutableSet, NSNumber, NSObject<OS_dispatch_group>, NSObject<OS_dispatch_queue>, NSObject<OS_dispatch_source>, NSString, NSURL, PQLConnection, PQLNameInjection;

@interface BRCLocalContainer : NSObject <BRCContainer> {
    NSMutableSet *_XPCClientsUsingUbiquity;
    BOOL _activated;
    BRCThrottle *_additionsThrottle;
    NSMutableIndexSet *_appliedTombstoneRanks;
    BRCDBThrottle *_applyThrottle;
    NSString *_containerID;
    BRContainer *_containerMetadata;
    NSString *_containerMetadataEtag;
    BOOL _containerMetadataNeedsSyncUp;
    NSString *_coreDuetAdmissionTicket;
    CDBudget *_coreDuetContainerDataBudget;
    CDBudget *_coreDuetContainerEnergyBudget;
    CDAttribute *_coreDuetContainerEventAttribute;
    NSDate *_dateWhenLastForegroundClientLeft;
    PQLConnection *_db;
    BOOL _deactivated;
    NSNumber *_deepScanStamp;
    <BRCLocalContainerDelegate> *_delegate;
    PQLNameInjection *_desiredAdditionsTable;
    NSObject<OS_dispatch_group> *_faultingGroup;
    NSNumber *_fileID;
    NSObject<OS_dispatch_queue> *_foregroundStateQueue;
    NSMutableSet *_foregroundXPCClients;
    NSNumber *_generationID;
    BOOL _isDuetSetup;
    PQLNameInjection *_itemsTable;
    NSString *_lastForegroundClientDescription;
    unsigned long long _lastInsertedRank;
    NSError *_lastSyncDownError;
    NSError *_lastSyncUpError;
    unsigned long long _lostHeapKey;
    NSString *_mangledID;
    unsigned long long _maxLostStamp;
    BOOL _needsSave;
    int _notifyTokenForFramework;
    NSMutableIndexSet *_pendingCoordinatedIOs;
    NSMutableSet *_pendingFileCoordinators;
    PQLNameInjection *_pkgItemsTable;
    unsigned long long _readerLastRowID;
    BRCDBThrottle *_readerThrottle;
    unsigned long long _requestID;
    BRCRelativePath *_root;
    unsigned int _schemaVersion;
    BRCServerContainer *_serverContainer;
    PQLNameInjection *_serverItemsTable;
    BRCAccountSession *_session;
    BOOL _shouldForceContainerForeground;
    unsigned int _state;
    BRCSyncDownOperation *_syncDownOperation;
    BRCSyncOperationThrottle *_syncDownThrottle;
    NSArray *_syncThrottles;
    BRCSyncBudgetThrottle *_syncUpBudget;
    BRCSyncUpOperation *_syncUpOperation;
    unsigned long long _syncUpRetryAfter;
    BRCSyncOperationThrottle *_syncUpThrottle;
    NSArray *_tableNames;
    NSObject<OS_dispatch_source> *_timerForGraceForegroundPeriod;
    BRCVersionDownloader *_versionDownloader;
    BRCVersionUploader *_versionUploader;
    /* Warning: Unrecognized filer type: 'A' using 'void*' */ void*_activeAliasQueries;
    /* Warning: Unrecognized filer type: 'A' using 'void*' */ void*_activeQueries;
    /* Warning: Unrecognized filer type: 'A' using 'void*' */ void*_activeRecursiveQueries;
    /* Warning: Unrecognized filer type: 'A' using 'void*' */ void*_syncBarriers;
    /* Warning: Unrecognized filer type: 'A' using 'void*' */ void*_syncState;
}

@property(retain) BRCAccountSession * accountSession;
@property(readonly) BRCThrottle * additionsThrottle;
@property(readonly) BOOL allowsCellularAccess;
@property(readonly) BRCDBThrottle * applyThrottle;
@property(readonly) NSString * containerID;
@property(readonly) BRContainer * containerMetadata;
@property(retain) NSString * containerMetadataEtag;
@property BOOL containerMetadataNeedsSyncUp;
@property(readonly) NSString * coreDuetAdmissionTicket;
@property(readonly) unsigned long long currentRequestID;
@property(readonly) PQLConnection * db;
@property(readonly) BOOL deactivated;
@property(copy,readonly) NSString * debugDescription;
@property(readonly) NSNumber * deepScanStamp;
@property(retain) <BRCLocalContainerDelegate> * delegate;
@property(copy,readonly) NSString * description;
@property(readonly) PQLNameInjection * desiredAdditionsTable;
@property(readonly) BRCRelativePath * documentsPath;
@property(readonly) NSNumber * fileID;
@property(readonly) NSNumber * generationID;
@property(readonly) BOOL hasActiveAliasQueries;
@property(readonly) BOOL hasActiveQueries;
@property(readonly) BOOL hasActiveRecursiveQueries;
@property(readonly) BOOL hasDownloads;
@property(readonly) BOOL hasUploads;
@property(readonly) unsigned int hash;
@property(readonly) BOOL isForeground;
@property(readonly) BOOL isGreedy;
@property(readonly) PQLNameInjection * itemsTable;
@property(readonly) unsigned long long lostHeapKey;
@property(readonly) NSString * mangledID;
@property(readonly) BOOL needsSave;
@property(readonly) BRCRelativePath * path;
@property(readonly) PQLNameInjection * pkgItemsTable;
@property(readonly) NSDictionary * plist;
@property(readonly) BRCDBThrottle * readerThrottle;
@property(retain) BRCRelativePath * root;
@property(retain) BRCServerContainer * serverContainer;
@property(readonly) PQLNameInjection * serverItemsTable;
@property(readonly) unsigned int state;
@property(readonly) Class superclass;
@property(readonly) unsigned long long syncKey;
@property(readonly) unsigned int syncState;
@property(readonly) NSArray * syncThrottles;
@property(readonly) NSArray * tableNames;
@property(readonly) NSURL * url;
@property(readonly) BRCVersionDownloader * versionDownloader;
@property(readonly) BRCVersionUploader * versionUploader;
@property(readonly) NSString * zoneName;

+ (BOOL)_sql_upgrade_to_version1:(id)arg1;
+ (id)containerByID:(id)arg1 withDB:(id)arg2;
+ (struct PQLResultSet { Class x1; }*)containersEnumerator:(id)arg1;

- (void).cxx_destruct;
- (void)_activateState:(unsigned int)arg1 origState:(unsigned int)arg2;
- (void)_armForegroundGraceTimerForClientDescription:(id)arg1;
- (void)_buildUnappliedCommandsQueue:(unsigned long long)arg1 maxRank:(unsigned long long)arg2;
- (void)_checkResultSetIsEmpty:(id)arg1 logToFile:(struct __sFILE { char *x1; int x2; int x3; short x4; short x5; struct __sbuf { char *x_6_1_1; int x_6_1_2; } x6; int x7; void *x8; int (*x9)(); int (*x10)(); int (*x11)(); int (*x12)(); struct __sbuf { char *x_13_1_1; int x_13_1_2; } x13; struct __sFILEX {} *x14; int x15; unsigned char x16[3]; unsigned char x17[1]; struct __sbuf { char *x_18_1_1; int x_18_1_2; } x18; int x19; long long x20; }*)arg2 reason:(id)arg3 result:(BOOL*)arg4;
- (BOOL)_dumpChildrenOfDirectory:(id)arg1 toContext:(id)arg2 visitedItems:(id)arg3 depth:(int)arg4 error:(id*)arg5;
- (id)_initWithContainerID:(id)arg1 path:(id)arg2 db:(id)arg3 accountSession:(id)arg4;
- (id)_itemsKilledInSyncUp;
- (struct PQLResultSet { Class x1; }*)_itemsNeedingUploadEnumeratorWithAdditionalClause:(id)arg1;
- (void)_learnCKInfosFromSavedRecords:(id)arg1;
- (void)_markRequestIDAcked;
- (void)_notifyFrameworkContainersMonitorWithState:(BOOL)arg1;
- (void)_setupDuetIfNeeded;
- (void)_syncUpOfRecords:(id)arg1 didFinishWithError:(id)arg2;
- (id)_unappliedRanks;
- (void)_updateContainerMetadataFromRecord:(id)arg1;
- (id)accountSession;
- (void)activateWithServerContainer:(id)arg1 forCreation:(BOOL)arg2;
- (void)addClientUsingUbiquity:(id)arg1;
- (void)addForegroundClient:(id)arg1;
- (id)additionsThrottle;
- (unsigned long long)allocateLostStampAddingBackoff:(BOOL)arg1;
- (BOOL)allowsCellularAccess;
- (id)applyThrottle;
- (void)availableQuotaDidIncreaseWithNewAvailableQuota:(long long)arg1;
- (unsigned long long)backoffBeforeProcessingLostItemWithStamp:(unsigned long long)arg1;
- (struct PQLResultSet { Class x1; }*)bouncedItemsEnumerator;
- (BOOL)changedAtRelativePath:(id)arg1;
- (void)clearStateBits:(unsigned int)arg1;
- (void)clearSyncStateBits:(unsigned int)arg1;
- (void)clearSyncUpError;
- (id)containerID;
- (id)containerMetadata;
- (id)containerMetadataEtag;
- (BOOL)containerMetadataNeedsSyncUp;
- (id)coordinatorForItem:(id)arg1 forRead:(BOOL)arg2;
- (id)coreDuetAdmissionTicket;
- (unsigned int)countOfItemsWithPendingChanges;
- (unsigned long long)currentRequestID;
- (id)db;
- (void)deactivate;
- (BOOL)deactivated;
- (void)dealloc;
- (id)deepScanStamp;
- (id)delegate;
- (BOOL)deleteReservedChildren:(id)arg1;
- (id)description;
- (id)desiredAdditionsTable;
- (id)desiredLoserForItemID:(id)arg1 etag:(id)arg2;
- (id)desiredThumbnailForItemID:(id)arg1;
- (id)deviceKeyForName:(id)arg1;
- (void)didClearAllItemsMarkedOverQuota;
- (void)didCreateDocumentScopedItem;
- (void)didDownloadAllItems;
- (void)didFindLostItem:(id)arg1;
- (void)didGCTombstoneRanks:(id)arg1;
- (void)didMarkItemNeedsDownload;
- (void)didMarkItemNeedsUpload;
- (void)didMarkItemRejected;
- (void)didMarkItemUploadOverQuota;
- (void)didMarkItemWithSizeDecreaseNeedsSyncUp;
- (void)didSyncDownRequestID:(unsigned long long)arg1 caughtUpWithServer:(BOOL)arg2 flushClientTruth:(BOOL)arg3;
- (void)didUpdateCurrentVersionOfItem:(id)arg1;
- (void)didUploadAllItems;
- (id)directoryItemIDByFileID:(unsigned long long)arg1;
- (unsigned long long)documentCount;
- (unsigned long long)documentEvictableSizeUsage;
- (unsigned long long)documentSizeUsage;
- (id)documentsPath;
- (BOOL)dumpActivityToContext:(id)arg1 error:(id*)arg2;
- (BOOL)dumpTablesToContext:(id)arg1 error:(id*)arg2;
- (BOOL)evictItem:(id)arg1 group:(id)arg2 error:(id*)arg3;
- (struct PQLResultSet { Class x1; }*)evictableDocumentsEnumerator;
- (BOOL)existsByItemID:(id)arg1;
- (BOOL)existsByParentID:(id)arg1 andName:(id)arg2;
- (id)faultByParentID:(id)arg1 andDisplayName:(id)arg2;
- (id)fileID;
- (id)fileIDForDirectoryItemID:(id)arg1 withDB:(id)arg2;
- (BOOL)fileIDIsStaged:(unsigned long long)arg1;
- (BOOL)finishedReset:(unsigned int)arg1;
- (id)generationID;
- (BOOL)handleResetErrorIfNeeded:(id)arg1;
- (void)handleRootRecordDeletion;
- (BOOL)hasActiveAliasQueries;
- (BOOL)hasActiveQueries;
- (BOOL)hasActiveRecursiveQueries;
- (BOOL)hasDownloads;
- (BOOL)hasItemsPendingRead;
- (BOOL)hasLocalChanges;
- (BOOL)hasUbiquitousDocuments;
- (BOOL)hasUbiquityClientsConnected;
- (BOOL)hasUnappliedCommands;
- (BOOL)hasUploads;
- (unsigned int)hash;
- (id)initFromPQLResultSet:(id)arg1 error:(id*)arg2;
- (id)initWithDB:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isForeground;
- (BOOL)isGreedy;
- (BOOL)isRankPostponed:(id)arg1;
- (id)itemByDocumentID:(unsigned int)arg1;
- (id)itemByFileID:(unsigned long long)arg1;
- (id)itemByItemID:(id)arg1;
- (id)itemByParentID:(id)arg1 andName:(id)arg2;
- (id)itemByRowID:(unsigned int)arg1;
- (BOOL)itemHasChildren:(id)arg1;
- (struct PQLResultSet { Class x1; }*)itemsEnumerator;
- (struct PQLResultSet { Class x1; }*)itemsEnumeratorChildOf:(id)arg1 rankMin:(unsigned long long)arg2 rankMax:(unsigned long long)arg3 count:(unsigned long long)arg4;
- (struct PQLResultSet { Class x1; }*)itemsEnumeratorParentedTo:(id)arg1 notParentedTo:(id)arg2 rankMin:(unsigned long long)arg3 rankMax:(unsigned long long)arg4 namePrefix:(id)arg5 shouldIncludeFolders:(BOOL)arg6 shouldIncludeAliases:(BOOL)arg7 count:(unsigned long long)arg8;
- (struct PQLResultSet { Class x1; }*)itemsEnumeratorWithDB:(id)arg1;
- (struct PQLResultSet { Class x1; }*)itemsEnumeratorWithParentID:(id)arg1;
- (struct PQLResultSet { Class x1; }*)itemsNeedingDownloadEnumeratorWithItemIDFilter:(id)arg1;
- (struct PQLResultSet { Class x1; }*)itemsNeedingUploadEnumeratorWithItemIDFilter:(id)arg1;
- (id)itemsTable;
- (struct PQLResultSet { Class x1; }*)itemsWithFailedUploadEnumeratorWithSizeSmallerThan:(unsigned long long)arg1;
- (struct PQLResultSet { Class x1; }*)itemsWithInFlightDiffsEnumerator;
- (struct PQLResultSet { Class x1; }*)liveItemIDsWithStagedAdditionsEnumerator;
- (struct PQLResultSet { Class x1; }*)losersNeedingDownloadEnumeratorForItemID:(id)arg1;
- (unsigned long long)lostHeapKey;
- (id)mangledID;
- (unsigned int)markChildrenLostForItemID:(id)arg1;
- (void)markLatestSyncRequestFailed;
- (BOOL)needsSave;
- (id)nextItemToRead;
- (id)nextLostItemIDWithBackoff:(unsigned long long*)arg1 now:(unsigned long long)arg2;
- (long long)nextReadRetryTimestamp;
- (unsigned long long)nextSyncUpRequestID;
- (id)nextUnappliedBatch:(unsigned int)arg1 now:(unsigned long long)arg2 next:(long long*)arg3;
- (void)notifyClient:(id)arg1 whenFaultingIsDone:(id)arg2;
- (id)parentIDForPath:(id)arg1;
- (id)path;
- (id)pkgItemsTable;
- (id)plist;
- (void)postponeUnappliedRank:(id)arg1;
- (BOOL)printStatusLoggingToFile:(struct __sFILE { char *x1; int x2; int x3; short x4; short x5; struct __sbuf { char *x_6_1_1; int x_6_1_2; } x6; int x7; void *x8; int (*x9)(); int (*x10)(); int (*x11)(); int (*x12)(); struct __sbuf { char *x_13_1_1; int x_13_1_2; } x13; struct __sFILEX {} *x14; int x15; unsigned char x16[3]; unsigned char x17[1]; struct __sbuf { char *x_18_1_1; int x_18_1_2; } x18; int x19; long long x20; }*)arg1 withDB:(id)arg2;
- (id)readerThrottle;
- (BOOL)recomputeSyncBlockState;
- (void)registerQueryWithAliases:(BOOL)arg1 isRecursive:(BOOL)arg2;
- (void)removeClientUsingUbiquity:(id)arg1;
- (void)removeForegroundClient:(id)arg1;
- (void)removeUnappliedRank:(id)arg1 isAppliedTombstone:(BOOL)arg2;
- (void)reschedulePostponedRanks;
- (void)rescheduleUnappliedItemID:(id)arg1 forFaultCreation:(BOOL)arg2;
- (void)rescheduleUnappliedRank:(id)arg1 forFaultCreation:(BOOL)arg2;
- (id)reservedItemByParentID:(id)arg1 andDisplayName:(id)arg2;
- (void)reset:(unsigned int)arg1 withCoordinationCompletionHandler:(id)arg2;
- (void)reset:(unsigned int)arg1;
- (void)resetSyncBudgetAndThrottle;
- (id)resolveClashOfAlias:(id)arg1 atPath:(id)arg2 withAlias:(id)arg3 atPath:(id)arg4;
- (void)retriedUnappliedRank:(id)arg1;
- (id)root;
- (BOOL)saveToDB;
- (void)scheduleContainerMetadataSyncUp;
- (void)scheduleCoordinatedReadForItem:(id)arg1 atPath:(id)arg2;
- (void)scheduleDeepScan;
- (void)scheduleRead;
- (void)scheduleSyncDown;
- (void)scheduleSyncUp;
- (id)serverContainer;
- (BOOL)serverDidAckAliasTarget:(id)arg1;
- (void)serverDidAckAliasTargetDeletion:(id)arg1;
- (id)serverItemByItemID:(id)arg1;
- (id)serverItemByParentID:(id)arg1 andName:(id)arg2;
- (struct PQLResultSet { Class x1; }*)serverItemsEnumerator;
- (id)serverItemsTable;
- (void)setAccountSession:(id)arg1;
- (void)setContainerID:(id)arg1;
- (void)setContainerMetadataEtag:(id)arg1;
- (void)setContainerMetadataNeedsSyncUp:(BOOL)arg1;
- (void)setDelegate:(id)arg1;
- (void)setNeedsSave:(BOOL)arg1;
- (void)setRoot:(id)arg1;
- (void)setServerContainer:(id)arg1;
- (void)setStateBits:(unsigned int)arg1;
- (void)setSyncDisabled:(BOOL)arg1;
- (void)setSyncStateBits:(unsigned int)arg1;
- (void)signalAdditionsNeedsApply;
- (void)signalNeedsToApplyChanges;
- (struct PQLResultSet { Class x1; }*)stagedItemsEnumerator;
- (void)startDownloadItem:(id)arg1 options:(unsigned int)arg2 group:(id)arg3;
- (void)startDownloadingItemsUsingGroup:(id)arg1;
- (BOOL)startReset:(unsigned int)arg1;
- (void)startSyncOperationOnQueue:(id)arg1 syncUpBudget:(float)arg2 now:(unsigned long long)arg3;
- (unsigned int)state;
- (void)syncDownOperation:(id)arg1 didFinishWithError:(id)arg2;
- (unsigned long long)syncKey;
- (unsigned int)syncState;
- (id)syncThrottles;
- (id)tableNames;
- (void)tellDuetContainerWasAccessedByBundleID:(id)arg1;
- (long long)throttleHashWithItemID:(id)arg1;
- (void)unregisterQueryWithAliases:(BOOL)arg1 isRecursive:(BOOL)arg2;
- (void)updateFromFSAtPath:(id)arg1;
- (void)updateWithPlist:(id)arg1;
- (BOOL)upgradeTables;
- (id)url;
- (BOOL)validateItemsLoggingToFile:(struct __sFILE { char *x1; int x2; int x3; short x4; short x5; struct __sbuf { char *x_6_1_1; int x_6_1_2; } x6; int x7; void *x8; int (*x9)(); int (*x10)(); int (*x11)(); int (*x12)(); struct __sbuf { char *x_13_1_1; int x_13_1_2; } x13; struct __sFILEX {} *x14; int x15; unsigned char x16[3]; unsigned char x17[1]; struct __sbuf { char *x_18_1_1; int x_18_1_2; } x18; int x19; long long x20; }*)arg1 withDB:(id)arg2;
- (BOOL)validateStructureLoggingToFile:(struct __sFILE { char *x1; int x2; int x3; short x4; short x5; struct __sbuf { char *x_6_1_1; int x_6_1_2; } x6; int x7; void *x8; int (*x9)(); int (*x10)(); int (*x11)(); int (*x12)(); struct __sbuf { char *x_13_1_1; int x_13_1_2; } x13; struct __sFILEX {} *x14; int x15; unsigned char x16[3]; unsigned char x17[1]; struct __sbuf { char *x_18_1_1; int x_18_1_2; } x18; int x19; long long x20; }*)arg1 withDB:(id)arg2;
- (id)versionDownloader;
- (id)versionUploader;
- (id)xattrForSignature:(id)arg1;
- (id)zoneName;

@end
