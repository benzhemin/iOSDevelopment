/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@interface TSCH3DBaseImageTextureTiling : TSCH3DTextureTiling {
    struct tvec2<float> { 
        union { 
            float x; 
            float r; 
            float s; 
        } ; 
        union { 
            float y; 
            float g; 
            float t; 
        } ; 
    float mRotation;
    } mScale;
}

@property float rotation;
@property struct tvec2<float> { union { float x_1_1_1; float x_1_1_2; float x_1_1_3; } x1; union { float x_2_1_1; float x_2_1_2; float x_2_1_3; } x2; } scale;

+ (id)instanceWithArchive:(const struct Chart3DBaseImageTextureTilingArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; struct Chart3DVectorArchive {} *x3; float x4; int x5; unsigned int x6[1]; }*)arg1 unarchiver:(id)arg2;

- (id).cxx_construct;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (unsigned int)hash;
- (id)initWithArchive:(const struct Chart3DBaseImageTextureTilingArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; struct Chart3DVectorArchive {} *x3; float x4; int x5; unsigned int x6[1]; }*)arg1 unarchiver:(id)arg2;
- (BOOL)isEqual:(id)arg1;
- (void)restoreDefault;
- (float)rotation;
- (void)saveToArchive:(struct Chart3DBaseImageTextureTilingArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; struct Chart3DVectorArchive {} *x3; float x4; int x5; unsigned int x6[1]; }*)arg1 archiver:(id)arg2;
- (struct tvec2<float> { union { float x_1_1_1; float x_1_1_2; float x_1_1_3; } x1; union { float x_2_1_1; float x_2_1_2; float x_2_1_3; } x2; })scale;
- (void)setRotation:(float)arg1;
- (void)setScale:(struct tvec2<float> { union { float x_1_1_1; float x_1_1_2; float x_1_1_3; } x1; union { float x_2_1_1; float x_2_1_2; float x_2_1_3; } x2; })arg1;

@end
