/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/CloudDocsDaemon
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class BRCAccountSession, BRCBookmark, BRCGenerationID, BRCLocalContainer, BRCRelativePath, NSData, NSDirectoryEnumerator, NSNumber, NSString, NSURL;

@interface BRCRelativePath : NSObject <NSSecureCoding> {
    struct timespec { 
        int tv_sec; 
        long tv_nsec; 
    struct timespec { 
        int tv_sec; 
        long tv_nsec; 
    struct _opaque_pthread_rwlock_t { 
        long __sig; 
        BOOL __opaque[124]; 
    unsigned int _isExcluded : 1;
    unsigned int _isInPackage : 1;
    unsigned int _isPackageRoot : 1;
    unsigned int _readFault : 1;
    unsigned int _hasFinderTags : 1;
    unsigned int _isBusy : 1;
    unsigned int _isAlias : 1;
    unsigned int _qtnResolved : 1;
    NSString *_absolutePath;
    BRCAccountSession *_accountSession;
    BRCRelativePath *_basePath;
    } _birthtime;
    BRCBookmark *_bookmark;
    unsigned int _componentsCountToRoot;
    BRCLocalContainer *_container;
    NSDirectoryEnumerator *_descendantsEnumerator;
    int _deviceID;
    struct { int x1; long x2; long x3; char *x4; int x5; long x6; long x7; int x8; struct _opaque_pthread_mutex_t { long x_9_1_1; BOOL x_9_1_2[40]; } x9; struct _telldir {} *x10; } *_dir;
    unsigned int _documentID;
    int _fd;
    unsigned long long _fileID;
    unsigned char _finderInfo[32];
    unsigned int _flags;
    unsigned int _fsGenerationID;
    BRCGenerationID *_generationID;
    unsigned short _mode;
    } _mtime;
    } _mutex;
    unsigned int _nlink;
    unsigned long long _parentFileID;
    NSData *_quarantineInfo;
    NSString *_relativePath;
    long long _size;
    NSString *_symlinkContent;
    NSNumber *_volumeID;
    /* Warning: Unrecognized filer type: 'A' using 'void*' */ void*_openRefCount;
}

@property(readonly) NSString * absolutePath;
@property(readonly) BRCAccountSession * accountSession;
@property(readonly) long birthTime;
@property(readonly) BRCBookmark * bookmark;
@property(readonly) BRCLocalContainer * container;
@property(readonly) int deviceID;
@property(readonly) unsigned int documentID;
@property(readonly) BOOL exists;
@property(readonly) NSString * faultDisplayName;
@property(readonly) unsigned long long fileID;
@property(readonly) NSNumber * fileObjectID;
@property(readonly) unsigned long fileType;
@property(readonly) NSString * filename;
@property(readonly) unsigned int fsGenerationID;
@property(readonly) BRCGenerationID * generationID;
@property(readonly) unsigned int hardlinkCount;
@property(readonly) BOOL hasFinderTags;
@property(readonly) unsigned int hash;
@property(readonly) BOOL isAlias;
@property(readonly) BOOL isBusy;
@property(readonly) BOOL isContainer;
@property(readonly) BOOL isDocument;
@property(readonly) BOOL isExcluded;
@property(readonly) BOOL isExecutable;
@property(readonly) BOOL isFault;
@property(readonly) BOOL isFile;
@property(readonly) BOOL isHiddenExtension;
@property(readonly) BOOL isHiddenFile;
@property(readonly) BOOL isInPackage;
@property(readonly) BOOL isPackageRoot;
@property(readonly) BOOL isParentedToContainer;
@property(readonly) BOOL isRoot;
@property(readonly) BOOL isSymLink;
@property(readonly) BOOL isUnixDir;
@property(readonly) BOOL isWritable;
@property(readonly) long modificationTime;
@property(readonly) unsigned long long parentFileID;
@property(readonly) unsigned int parentHash;
@property(readonly) NSString * pathRelativeToContainer;
@property(readonly) NSString * pathRelativeToPackageRoot;
@property(readonly) NSString * pathRelativeToRoot;
@property(readonly) NSData * quarantineInfo;
@property(readonly) BRCRelativePath * root;
@property(readonly) long long size;
@property(readonly) NSString * symlinkContent;
@property(readonly) NSURL * url;
@property(readonly) NSNumber * volumeID;

+ (int)locateByFileID:(unsigned long long)arg1 inContainer:(id)arg2;
+ (BOOL)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_close;
- (BOOL)_fixupRelativePath;
- (id)_initWithPath:(id)arg1 relativeToRoot:(id)arg2;
- (BOOL)_resolveAndKeepOpenMustExist:(BOOL)arg1 error:(int*)arg2;
- (int)_resolveBasePath;
- (int)_resolveContainer;
- (int)_resolveSymlinkRelativeTo:(int)arg1 path:(id)arg2;
- (int)_resolveWhenDoesntExist;
- (int)_resolveWhenExists;
- (BOOL)_shouldKeepBasePathOpen;
- (id)absolutePath;
- (id)accountSession;
- (long)birthTime;
- (id)bookmark;
- (void)close;
- (void)closeDirectoryScan;
- (id)container;
- (void)dealloc;
- (id)description;
- (int)deviceID;
- (unsigned int)documentID;
- (void)encodeWithCoder:(id)arg1;
- (BOOL)exists;
- (id)faultDisplayName;
- (unsigned long long)fileID;
- (id)fileObjectID;
- (unsigned long)fileType;
- (id)filename;
- (BOOL)flock:(int)arg1;
- (unsigned int)fsGenerationID;
- (id)generationID;
- (unsigned int)hardlinkCount;
- (BOOL)hasFinderTags;
- (unsigned int)hash;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithFileID:(unsigned long long)arg1 inContainer:(id)arg2;
- (id)initWithPath:(id)arg1 inContainer:(id)arg2;
- (id)initWithRootPath:(id)arg1 accountSession:(id)arg2;
- (BOOL)isAlias;
- (BOOL)isBusy;
- (BOOL)isContainer;
- (BOOL)isDocument;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isEqualToRelativePath:(id)arg1;
- (BOOL)isExcluded;
- (BOOL)isExecutable;
- (BOOL)isFault;
- (BOOL)isFile;
- (BOOL)isHiddenExtension;
- (BOOL)isHiddenFile;
- (BOOL)isInPackage;
- (BOOL)isPackageRoot;
- (BOOL)isParentedToContainer;
- (BOOL)isResolved;
- (BOOL)isRoot;
- (BOOL)isSymLink;
- (BOOL)isUnixDir;
- (BOOL)isWritable;
- (id)logicalURLWithLogicalName:(id)arg1;
- (long)modificationTime;
- (id)nextChild;
- (id)nextDescendant;
- (BOOL)openDirectoryForRecursiveScan;
- (BOOL)openDirectoryForScanWithError:(int*)arg1;
- (unsigned long long)parentFileID;
- (unsigned int)parentHash;
- (id)pathOfPackageRoot;
- (id)pathOfParent;
- (id)pathRelativeToContainer;
- (id)pathRelativeToPackageRoot;
- (id)pathRelativeToRoot;
- (id)pathWithChildAtPath:(id)arg1;
- (BOOL)performOnOpenFileDescriptor:(id)arg1 error:(int*)arg2;
- (BOOL)performOnOpenParentFileDescriptor:(id)arg1 error:(int*)arg2;
- (id)quarantineInfo;
- (id)refreshFromPathMustExist:(BOOL)arg1;
- (BOOL)resolveAndKeepOpenMustExist:(BOOL)arg1 error:(int*)arg2;
- (BOOL)resolveMustExist:(BOOL)arg1 error:(int*)arg2;
- (id)root;
- (long long)size;
- (id)symlinkContent;
- (id)url;
- (id)volumeID;

@end
